import asyncio
import logging
import os
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
import aiohttp

from handlers import router, state_protection
from database import init_db, ensure_database_exists, fix_incomplete_records, validate_data_integrity
from admin import admin_router
from broadcast import BroadcastScheduler
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —ç–º–æ–¥–∑–∏
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler('bot.log', encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter(log_format))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(logging.Formatter(log_format))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=logging.INFO,
        handlers=[file_handler, console_handler],
        format=log_format
    )

setup_logging()
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")
PROXY_URL = os.getenv("PROXY_URL") 

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = []
if ADMIN_IDS_STR:
    try:
        ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(",") if x.strip()]
    except ValueError:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_IDS –≤ .env —Ñ–∞–π–ª–µ")

class AdminMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, admin_ids):
        self.admin_ids = admin_ids
    
    async def __call__(self, handler, event, data):
        if hasattr(event, 'from_user') and event.from_user:
            data['is_admin'] = event.from_user.id in self.admin_ids
        else:
            data['is_admin'] = False
        return await handler(event, data)

async def create_bot_with_proxy():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    
    if not PROXY_URL:
        # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞
        return Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
        )
    
    try:
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏: {PROXY_URL}")
        
        # –°–æ–∑–¥–∞–µ–º connector –¥–ª—è –ø—Ä–æ–∫—Å–∏
        connector = aiohttp.TCPConnector()
        
        # –°–æ–∑–¥–∞–µ–º timeout
        timeout = aiohttp.ClientTimeout(total=60, connect=15)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø—Ä–æ–∫—Å–∏
        session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout
        )
        
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ AiohttpSession
        aiogram_session = AiohttpSession(session)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(
            token=BOT_TOKEN,
            session=aiogram_session,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
        )
        
        return bot
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏: {e}")
        logger.info("–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞
        return Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
        )

async def create_bot_with_retry():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è retry"""
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if PROXY_URL:
            return await create_bot_with_proxy()
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
            )
            return bot
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        # Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞
        return Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
        )
        
async def setup_commands(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        from aiogram.types import BotCommand, BotCommandScopeDefault
        
        commands = [
            BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"),
            BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
            BotCommand(command="status", description="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"),
            BotCommand(command="restart", description="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
        ]
        
        await bot.set_my_commands(commands, BotCommandScopeDefault())
        logger.info("–£–°–ü–ï–•: –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")

async def test_bot_connection(bot: Bot, max_retries: int = 3):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram —Å retry"""
    for attempt in range(max_retries):
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram ({attempt + 1}/{max_retries})...")
            me = await bot.get_me()
            logger.info(f"–£–°–ü–ï–•: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram. –ë–æ—Ç: @{me.username}")
            return True
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
            if attempt < max_retries - 1:
                wait_time = (attempt + 1) * 5
                logger.info(f"–ñ–¥—É {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(wait_time)
    
    logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
    return False

async def startup_checks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    missing_vars = []
    if not BOT_TOKEN or BOT_TOKEN == "your_bot_token_here":
        missing_vars.append("BOT_TOKEN")
    if not ADMIN_PASSWORD or ADMIN_PASSWORD == "your_secure_admin_password_here":
        missing_vars.append("ADMIN_PASSWORD")
    if not ADMIN_IDS:
        missing_vars.append("ADMIN_IDS")
    
    if missing_vars:
        logger.error(f"–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        if not ensure_database_exists():
            logger.error("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            return False
        
        init_db()
        logger.info("–£–°–ü–ï–•: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        try:
            fixed_data = fix_incomplete_records()
            if fixed_data['fixed_records'] > 0:
                logger.info(f"–ò–°–ü–†–ê–í–õ–ï–ù–û: {fixed_data['fixed_records']} –Ω–µ–ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        try:
            integrity_check = validate_data_integrity()
            if not integrity_check['healthy']:
                logger.warning(f"–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏: {'; '.join(integrity_check['issues'])}")
            else:
                logger.info("–£–°–ü–ï–•: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {e}")
            
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    try:
        os.makedirs("materials", exist_ok=True)
        logger.info("–£–°–ü–ï–•: –ü–∞–ø–∫–∞ materials —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É materials: {e}")
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∑–∞—â–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if not await startup_checks():
        logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = None
    try:
        bot = await create_bot_with_retry()
        logger.info("–£–°–ü–ï–•: –ë–æ—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not await test_bot_connection(bot):
            logger.error("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
        await setup_commands(bot)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # ============================================================================
        # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø MIDDLEWARE –î–õ–Ø –ó–ê–©–ò–¢–´ –û–¢ –ó–ê–¶–ò–ö–õ–ò–í–ê–ù–ò–Ø
        # ============================================================================
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –∑–∞—â–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ü–ï–†–í–´–ú
        # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –∑–∞—â–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        dp.message.middleware(state_protection)
        dp.callback_query.middleware(state_protection)
        logger.info("–£–°–ü–ï–•: Middleware –∑–∞—â–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ middleware
        admin_middleware = AdminMiddleware(ADMIN_IDS)
        dp.message.middleware(admin_middleware)
        dp.callback_query.middleware(admin_middleware)
        logger.info("–£–°–ü–ï–•: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ (–ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù!)
        if ADMIN_IDS:
            dp.include_router(admin_router)  # –ü–ï–†–í–´–ú - –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä
            logger.info("–£–°–ü–ï–•: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        dp.include_router(router)  # –í–¢–û–†–´–ú - –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
        
        logger.info("–£–°–ü–ï–•: –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∑–∞—â–∏—Ç–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
    scheduler = None
    scheduler_task = None
    
    try:
        if ADMIN_IDS:
            scheduler = BroadcastScheduler(bot)
            logger.info("–£–°–ü–ï–•: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:")
    logger.info(f"   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(ADMIN_IDS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    logger.info(f"   –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∫–∏: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if ADMIN_PASSWORD else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    logger.info(f"   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫: {'–≤–∫–ª—é—á–µ–Ω' if scheduler else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    logger.info(f"   –ü—Ä–æ–∫—Å–∏: {'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' if PROXY_URL else '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}")
    logger.info(f"   –ó–∞—â–∏—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info(f"   Middleware: StateProtection -> AdminMiddleware -> Handlers")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ polling —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
        if scheduler:
            scheduler_task = asyncio.create_task(scheduler.start_scheduler())
            logger.info("–ó–ê–ü–£–©–ï–ù: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        def log_protection_stats():
            processing_count = len(state_protection.processing_users)
            cache_size = len(state_protection.user_last_action)
            timeout_size = len(state_protection.action_timeouts)
            
            if processing_count > 0 or cache_size > 50:
                logger.info(f"–ó–∞—â–∏—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {processing_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
                           f"–∫—ç—à {cache_size} –∑–∞–ø–∏—Å–µ–π, —Ç–∞–π–º-–∞—É—Ç—ã {timeout_size}")
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        async def stats_logger():
            while True:
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                log_protection_stats()
        
        stats_task = asyncio.create_task(stats_logger())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(
            bot,
            handle_signals=True,
            drop_pending_updates=True
        )
        
    except KeyboardInterrupt:
        logger.info("–û–°–¢–ê–ù–û–í–ö–ê: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        logger.error(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã: {len(state_protection.processing_users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler:
            scheduler.stop_scheduler()
            logger.info("–û–°–¢–ê–ù–û–í–õ–ï–ù: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫")
            
        if scheduler_task:
            scheduler_task.cancel()
            try:
                await scheduler_task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if 'stats_task' in locals():
            stats_task.cancel()
            try:
                await stats_task
            except asyncio.CancelledError:
                pass
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã
        final_processing = len(state_protection.processing_users)
        final_cache = len(state_protection.user_last_action)
        logger.info(f"–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: {final_processing} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
                   f"{final_cache} –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã
        state_protection.processing_users.clear()
        state_protection.user_last_action.clear()
        state_protection.action_timeouts.clear()
        logger.info("–û–ß–ò–©–ï–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω–æ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if bot:
            try:
                await bot.session.close()
                logger.info("–ó–ê–ö–†–´–¢–û: –°–µ—Å—Å–∏—è –±–æ—Ç–∞")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
        
        logger.info("–ó–ê–í–ï–†–®–ï–ù–û: –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∑–∞—â–∏—Ç–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    if not os.path.exists('.env'):
        print("–û–®–ò–ë–ö–ê: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        print("\n–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env:")
        print("BOT_TOKEN=your_bot_token_here")
        print("ADMIN_IDS=123456789")
        print("ADMIN_PASSWORD=your_password_here")
        return False
    
    return True

def print_startup_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   –ö–ê–†–î–ò–û–ß–ï–ö–ê–ü –ë–û–¢ v2.0                      ‚ïë
‚ïë                  –° –ó–ê–©–ò–¢–û–ô –û–¢ –ó–ê–¶–ò–ö–õ–ò–í–ê–ù–ò–Ø                  ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  ‚Ä¢ Middleware –∑–∞—â–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π                              ‚ïë
‚ïë  ‚Ä¢ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π                      ‚ïë
‚ïë  ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è                           ‚ïë
‚ïë  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π                      ‚ïë
‚ïë  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not check_environment():
            exit(1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
        print_startup_banner()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
        
    except KeyboardInterrupt:
        print("–û–°–¢–ê–ù–û–í–ö–ê: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")
        exit(1)