"""
Модуль с психологическими и медицинскими тестами
Включает в себя все тесты, их интерпретацию и комплексную оценку рисков
"""

from datetime import datetime
from typing import Dict, List, Any, Tuple

# ============================================================================
# КОНСТАНТЫ И НАСТРОЙКИ
# ============================================================================

# Нормативные значения для тестов
TEST_NORMS = {
    'hads_anxiety': {
        'норма': (0, 7),
        'субклиническая': (8, 10), 
        'клиническая': (11, 21)
    },
    'hads_depression': {
        'норма': (0, 7),
        'субклиническая': (8, 10),
        'клиническая': (11, 21)
    },
    'burns': {
        'минимальная': (0, 5),
        'легкая': (6, 10),
        'умеренная': (11, 25),
        'тяжелая': (26, 50),
        'крайне_тяжелая': (51, 100)
    },
    'isi': {
        'нет_бессонницы': (0, 7),
        'подпороговая': (8, 14),
        'умеренная': (15, 21),
        'тяжелая': (22, 28)
    },
    'stop_bang': {
        'низкий': (0, 2),
        'умеренный': (3, 4),
        'высокий': (5, 8)
    },
    'ess': {
        'норма': (0, 10),
        'легкая': (11, 12),
        'умеренная': (13, 15),
        'выраженная': (16, 24)
    },
    'fagerstrom': {
        'очень_слабая': (0, 2),
        'слабая': (3, 4),
        'средняя': (5, 6),
        'сильная': (7, 8),
        'очень_сильная': (9, 10)
    },
    'audit': {
        'низкий': (0, 7),
        'опасное': (8, 15),
        'вредное': (16, 19),
        'зависимость': (20, 40)
    }
}

# ============================================================================
# СТРУКТУРЫ ДАННЫХ ТЕСТОВ
# ============================================================================

def get_hads_questions() -> List[Dict]:
    """HADS - Госпитальная шкала тревоги и депрессии"""
    return [
        {
            "id": 1,
            "text": "Я испытываю напряженность, мне не по себе",
            "type": "anxiety",
            "options": [
                {"text": "всё время", "score": 3},
                {"text": "часто", "score": 2},
                {"text": "время от времени, иногда", "score": 1},
                {"text": "совсем не испытываю", "score": 0}
            ]
        },
        {
            "id": 2,
            "text": "То, что приносило мне большое удовольствие, и сейчас вызывает у меня такое же чувство",
            "type": "depression",
            "options": [
                {"text": "определенно, это так", "score": 0},
                {"text": "наверное, это так", "score": 1},
                {"text": "лишь в очень малой степени это так", "score": 2},
                {"text": "это совсем не так", "score": 3}
            ]
        },
        {
            "id": 3,
            "text": "Я испытываю страх, кажется, будто что-то ужасное может вот-вот случиться",
            "type": "anxiety",
            "options": [
                {"text": "определенно, это так, и страх очень велик", "score": 3},
                {"text": "да, это так, но страх не очень сильный", "score": 2},
                {"text": "иногда, но это меня не беспокоит", "score": 1},
                {"text": "совсем не испытываю", "score": 0}
            ]
        },
        {
            "id": 4,
            "text": "Я способен рассмеяться и увидеть в том или ином событии смешное",
            "type": "depression",
            "options": [
                {"text": "определенно, это так", "score": 0},
                {"text": "наверное, это так", "score": 1},
                {"text": "лишь в очень малой степени это так", "score": 2},
                {"text": "это совсем не так", "score": 3}
            ]
        },
        {
            "id": 5,
            "text": "Беспокойные мысли крутятся у меня в голове",
            "type": "anxiety",
            "options": [
                {"text": "постоянно", "score": 3},
                {"text": "большую часть времени", "score": 2},
                {"text": "время от времени и не так часто", "score": 1},
                {"text": "только иногда", "score": 0}
            ]
        },
        {
            "id": 6,
            "text": "Я испытываю бодрость",
            "type": "depression",
            "options": [
                {"text": "совсем не испытываю", "score": 3},
                {"text": "очень редко", "score": 2},
                {"text": "иногда", "score": 1},
                {"text": "практически всё время", "score": 0}
            ]
        },
        {
            "id": 7,
            "text": "Я легко могу сесть и расслабиться",
            "type": "anxiety",
            "options": [
                {"text": "определенно, это так", "score": 0},
                {"text": "наверно, это так", "score": 1},
                {"text": "лишь изредка это так", "score": 2},
                {"text": "совсем не могу", "score": 3}
            ]
        },
        {
            "id": 8,
            "text": "Мне кажется, что я всё стал делать очень медленно",
            "type": "depression",
            "options": [
                {"text": "практически всё время", "score": 3},
                {"text": "часто", "score": 2},
                {"text": "иногда", "score": 1},
                {"text": "совсем нет", "score": 0}
            ]
        },
        {
            "id": 9,
            "text": "Я испытываю внутреннее напряжение или дрожь",
            "type": "anxiety",
            "options": [
                {"text": "совсем не испытываю", "score": 0},
                {"text": "иногда", "score": 1},
                {"text": "часто", "score": 2},
                {"text": "очень часто", "score": 3}
            ]
        },
        {
            "id": 10,
            "text": "Я не слежу за своей внешностью",
            "type": "depression",
            "options": [
                {"text": "определенно, это так", "score": 3},
                {"text": "я не уделяю этому столько времени, сколько нужно", "score": 2},
                {"text": "может быть, я стал меньше уделять этому внимания", "score": 1},
                {"text": "я слежу за собой так же, как и раньше", "score": 0}
            ]
        },
        {
            "id": 11,
            "text": "Я испытываю неусидчивость, словно мне постоянно нужно двигаться",
            "type": "anxiety",
            "options": [
                {"text": "определенно, это так", "score": 3},
                {"text": "наверно, это так", "score": 2},
                {"text": "лишь в некоторой степени это так", "score": 1},
                {"text": "совсем не испытываю", "score": 0}
            ]
        },
        {
            "id": 12,
            "text": "Я считаю, что мои дела (занятия, увлечения) могут принести мне чувство удовлетворения",
            "type": "depression",
            "options": [
                {"text": "точно так же, как и обычно", "score": 0},
                {"text": "да, но не в той степени, как раньше", "score": 1},
                {"text": "значительно меньше, чем обычно", "score": 2},
                {"text": "совсем так не считаю", "score": 3}
            ]
        },
        {
            "id": 13,
            "text": "У меня бывает внезапное чувство паники",
            "type": "anxiety",
            "options": [
                {"text": "очень часто", "score": 3},
                {"text": "довольно часто", "score": 2},
                {"text": "не так уж часто", "score": 1},
                {"text": "совсем не бывает", "score": 0}
            ]
        },
        {
            "id": 14,
            "text": "Я могу получить удовольствие от хорошей книги, радио- или телепрограммы",
            "type": "depression",
            "options": [
                {"text": "часто", "score": 0},
                {"text": "иногда", "score": 1},
                {"text": "редко", "score": 2},
                {"text": "очень редко", "score": 3}
            ]
        }
    ]

def get_burns_questions() -> List[Dict]:
    """Тест Бернса - Шкала депрессии"""
    questions_text = [
        "Чувство грусти или подавленности",
        "Чувство несчастья или хандры", 
        "Приступы плача или слезливость",
        "Чувство обескураженности",
        "Чувство безнадежности",
        "Низкая самооценка",
        "Чувство собственной никчемности или неполноценности",
        "Вина или стыд",
        "Самокритика или обвинение других",
        "Трудности с принятием решений",
        "Потеря интереса к семье, друзьям или коллегам",
        "Одиночество",
        "Проведение меньше времени с семьей или друзьями",
        "Потеря мотивации",
        "Потеря интереса к работе или другим занятиям",
        "Избегание работы или других занятий",
        "Потеря удовольствия или удовлетворения от жизни",
        "Чувство усталости",
        "Трудности со сном или слишком много сна",
        "Снижение или увеличение аппетита",
        "Потеря интереса к сексу",
        "Беспокойство о своем здоровье",
        "Есть ли у вас суицидальные мысли?",
        "Хотели бы вы покончить с жизнью?",
        "Есть ли у вас план причинения себе вреда?"
    ]
    
    options = [
        {"text": "Совсем нет", "score": 0},
        {"text": "Немного", "score": 1},
        {"text": "Умеренно", "score": 2},
        {"text": "Значительно", "score": 3},
        {"text": "Крайне сильно", "score": 4}
    ]
    
    return [
        {
            "id": i,
            "text": f"{i}. {text}",
            "options": options
        }
        for i, text in enumerate(questions_text, 1)
    ]

def get_isi_questions() -> List[Dict]:
    """ISI - Индекс тяжести бессонницы"""
    return [
        {
            "id": 1,
            "text": "Трудно заснуть",
            "options": [
                {"text": "Отсутствует", "score": 0},
                {"text": "Легкая", "score": 1},
                {"text": "Умеренная", "score": 2},
                {"text": "Тяжелая", "score": 3},
                {"text": "Очень тяжелая", "score": 4}
            ]
        },
        {
            "id": 2,
            "text": "Часто просыпаетесь",
            "options": [
                {"text": "Отсутствует", "score": 0},
                {"text": "Легкая", "score": 1},
                {"text": "Умеренная", "score": 2},
                {"text": "Тяжелая", "score": 3},
                {"text": "Очень тяжелая", "score": 4}
            ]
        },
        {
            "id": 3,
            "text": "Рано просыпаетесь и больше не засыпаете",
            "options": [
                {"text": "Отсутствует", "score": 0},
                {"text": "Легкая", "score": 1},
                {"text": "Умеренная", "score": 2},
                {"text": "Тяжелая", "score": 3},
                {"text": "Очень тяжелая", "score": 4}
            ]
        },
        {
            "id": 4,
            "text": "Насколько вы удовлетворены/неудовлетворены вашим сном в настоящее время?",
            "options": [
                {"text": "Очень удовлетворен", "score": 0},
                {"text": "Удовлетворен", "score": 1},
                {"text": "Умеренно удовлетворен", "score": 2},
                {"text": "Неудовлетворен", "score": 3},
                {"text": "Очень неудовлетворен", "score": 4}
            ]
        },
        {
            "id": 5,
            "text": "Насколько заметны для других ваши проблемы со сном в плане ухудшения качества жизни?",
            "options": [
                {"text": "Совсем не заметны", "score": 0},
                {"text": "Немного заметны", "score": 1},
                {"text": "Довольно заметны", "score": 2},
                {"text": "Очень заметны", "score": 3},
                {"text": "Крайне заметны", "score": 4}
            ]
        },
        {
            "id": 6,
            "text": "Насколько вы обеспокоены/встревожены вашими текущими проблемами со сном?",
            "options": [
                {"text": "Совсем не обеспокоен", "score": 0},
                {"text": "Немного обеспокоен", "score": 1},
                {"text": "Довольно обеспокоен", "score": 2},
                {"text": "Очень обеспокоен", "score": 3},
                {"text": "Крайне обеспокоен", "score": 4}
            ]
        },
        {
            "id": 7,
            "text": "Насколько проблемы со сном мешают вашему ежедневному функционированию (например, усталость днем, способность функционировать на работе/в повседневной деятельности, концентрация, память, настроение и т.д.)?",
            "options": [
                {"text": "Совсем не мешают", "score": 0},
                {"text": "Немного мешают", "score": 1},
                {"text": "Довольно мешают", "score": 2},
                {"text": "Очень мешают", "score": 3},
                {"text": "Крайне мешают", "score": 4}
            ]
        }
    ]

def get_stop_bang_questions() -> List[Dict]:
    """STOP-BANG - Оценка риска апноэ сна"""
    return [
        {
            "id": 1,
            "text": "Вы громко храпите? (То есть храп громче говорящего человека или слышен через закрытую дверь спальни)",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 2,
            "text": "Вы часто чувствуете усталость или сонливость в дневное время? (Например, за рулем или при разговоре)",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 3,
            "text": "Кто-нибудь говорил Вам, что Вы не дышите во сне или были ли у Вас приступы удушья/одышки в ночное время?",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 4,
            "text": "Страдаете ли Вы гипертонической болезнью?",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 5,
            "text": "Ваш индекс массы тела больше 35?",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 6,
            "text": "Вам больше 50 лет?",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 7,
            "text": "Окружность Вашей шеи больше нормы? (Для мужчин норма до 43см, для женщин до 41см. Измеряется на уровне щитовидного хряща гортани)",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 8,
            "text": "Вы мужчина?",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        }
    ]

def get_ess_questions() -> List[Dict]:
    """ESS - Шкала сонливости Эпворта"""
    situations = [
        "Когда сижу и читаю",
        "Когда смотрю телевизор",
        "Когда пассивно сижу в кресле на публичном мероприятии (например, в театре, на собрании)",
        "Когда еду в машине как пассажир в течение часа без остановок",
        "Когда обстоятельства позволили прилечь отдохнуть в дневное время",
        "Когда сижу и с кем-то разговариваю",
        "Когда спокойно сижу после обеда (без употребления алкоголя)",
        "За рулем автомобиля, когда остановился на несколько минут в пробке"
    ]
    
    options = [
        {"text": "точно не засну", "score": 0},
        {"text": "очень небольшая вероятность заснуть", "score": 1},
        {"text": "вероятно, могу заснуть", "score": 2},
        {"text": "очень большая вероятность, что засну", "score": 3}
    ]
    
    return [
        {
            "id": i,
            "text": f"Вероятность заснуть в ситуации: {situation}",
            "options": options
        }
        for i, situation in enumerate(situations, 1)
    ]

def get_fagerstrom_questions() -> List[Dict]:
    """Тест Фагерстрема - Никотиновая зависимость"""
    return [
        {
            "id": 1,
            "text": "Как быстро вы закуриваете первую сигарету после пробуждения?",
            "options": [
                {"text": "В первые 5 минут", "score": 3},
                {"text": "Через 6-30 минут", "score": 2},
                {"text": "Через 31-60 минут", "score": 1},
                {"text": "Через час или позже", "score": 0}
            ]
        },
        {
            "id": 2,
            "text": "Трудно ли вам воздерживаться от курения в местах, где курение запрещено?",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 3,
            "text": "От какой сигареты вам тяжелее всего отказаться?",
            "options": [
                {"text": "От первой с утра", "score": 1},
                {"text": "От любой другой", "score": 0}
            ]
        },
        {
            "id": 4,
            "text": "Сколько сигарет в день вы выкуриваете?",
            "options": [
                {"text": "10 или меньше", "score": 0},
                {"text": "11-20", "score": 1},
                {"text": "21-30", "score": 2},
                {"text": "31 или больше", "score": 3}
            ]
        },
        {
            "id": 5,
            "text": "Курите ли вы в первые часы после пробуждения чаще, чем в течение остального дня?",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        },
        {
            "id": 6,
            "text": "Курите ли вы, когда сильно заболели и вынуждены большую часть дня проводить в постели?",
            "options": [
                {"text": "Да", "score": 1},
                {"text": "Нет", "score": 0}
            ]
        }
    ]

def get_audit_questions() -> List[Dict]:
    """AUDIT - Тест на употребление алкоголя"""
    return [
        {
            "id": 1,
            "text": "Как часто вы употребляете алкогольные напитки?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Раз в месяц или реже", "score": 1},
                {"text": "2-4 раза в месяц", "score": 2},
                {"text": "2-3 раза в неделю", "score": 3},
                {"text": "4 раза в неделю и чаще", "score": 4}
            ]
        },
        {
            "id": 2,
            "text": "Сколько алкогольных напитков (стандартных порций) вы употребляете в типичный день, когда выпиваете?",
            "info_text": "Одна стандартная порция содержит 10 граммов этилового спирта. Например: Маленький бокал вина или шампанского (100 мл, крепость 12-13%), Половина кружки пива (250 мл, крепость 4,5-5%), Бокал крепленого вина (60 мл, крепость 16-22%), Маленькая рюмка крепкого алкоголя (30 мл, крепость 40%)",
            "options": [
                {"text": "1-2 стандартные порции", "score": 0},
                {"text": "3-4", "score": 1},
                {"text": "5-6", "score": 2},
                {"text": "7-9", "score": 3},
                {"text": "10 или больше", "score": 4}
            ]
        },
        {
            "id": 3,
            "text": "Как часто вы употребляете как минимум 1.5 л пива, или как минимум 180 мл крепкого алкоголя, или как минимум бутылку вина или шампанского (750 мл) в течение 24 часов?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Реже одного раза в месяц", "score": 1},
                {"text": "Ежемесячно", "score": 2},
                {"text": "Еженедельно", "score": 3},
                {"text": "Ежедневно или почти ежедневно", "score": 4}
            ]
        },
        {
            "id": 4,
            "text": "Как часто за последние 12 месяцев вы не могли остановиться, начав употреблять алкогольные напитки?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Реже одного раза в месяц", "score": 1},
                {"text": "Ежемесячно", "score": 2},
                {"text": "Еженедельно", "score": 3},
                {"text": "Ежедневно или почти ежедневно", "score": 4}
            ]
        },
        {
            "id": 5,
            "text": "Как часто за последние 12 месяцев из-за выпивки вы не сделали то, что от вас обычно ожидалось?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Реже одного раза в месяц", "score": 1},
                {"text": "Ежемесячно", "score": 2},
                {"text": "Еженедельно", "score": 3},
                {"text": "Ежедневно или почти ежедневно", "score": 4}
            ]
        },
        {
            "id": 6,
            "text": "Как часто за последние 12 месяцев вам необходимо было выпить утром, чтобы прийти в себя после выпивки (опохмелиться)?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Реже одного раза в месяц", "score": 1},
                {"text": "Ежемесячно", "score": 2},
                {"text": "Еженедельно", "score": 3},
                {"text": "Ежедневно или почти ежедневно", "score": 4}
            ]
        },
        {
            "id": 7,
            "text": "Как часто за последние 12 месяцев вы испытывали чувство вины или сожаления после выпивки?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Реже одного раза в месяц", "score": 1},
                {"text": "Ежемесячно", "score": 2},
                {"text": "Еженедельно", "score": 3},
                {"text": "Ежедневно или почти ежедневно", "score": 4}
            ]
        },
        {
            "id": 8,
            "text": "Как часто за последние 12 месяцев вы не могли вспомнить, что произошло накануне вечером из-за выпивки?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Реже одного раза в месяц", "score": 1},
                {"text": "Ежемесячно", "score": 2},
                {"text": "Еженедельно", "score": 3},
                {"text": "Ежедневно или почти ежедневно", "score": 4}
            ]
        },
        {
            "id": 9,
            "text": "Являлось ли ваше употребление алкогольных напитков причиной травмы у вас или у других людей?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Да, более 12 месяцев назад", "score": 2},
                {"text": "Да, в течение последних 12 месяцев", "score": 4}
            ]
        },
                {
            "id": 10,
            "text": "Случалось ли, что ваш близкий человек или родственник, друг или врач беспокоился насчет употребления вами алкоголя или советовал выпивать меньше?",
            "options": [
                {"text": "Никогда", "score": 0},
                {"text": "Да, более 12 месяцев назад", "score": 2},
                {"text": "Да, в течение последних 12 месяцев", "score": 4}
            ]
        }
    ]

# ============================================================================
# ФУНКЦИИ РАСЧЕТА РЕЗУЛЬТАТОВ
# ============================================================================

def calculate_hads_scores(answers: List[int]) -> Tuple[int, int]:
    """Рассчитывает баллы тревоги и депрессии для HADS"""
    questions = get_hads_questions()
    anxiety_score = 0
    depression_score = 0
    
    for i, answer in enumerate(answers):
        if i < len(questions):
            if questions[i]["type"] == "anxiety":
                anxiety_score += answer
            else:
                depression_score += answer
    
    return anxiety_score, depression_score

def validate_test_scores(**scores) -> Dict[str, Any]:
    """Валидация результатов тестов"""
    validation_rules = {
        'hads_anxiety_score': (0, 21),
        'hads_depression_score': (0, 21),
        'burns_score': (0, 100),
        'isi_score': (0, 28),
        'stop_bang_score': (0, 8),
        'ess_score': (0, 24),
        'fagerstrom_score': (0, 10),
        'audit_score': (0, 40)
    }
    
    errors = []
    for test_name, score in scores.items():
        if test_name in validation_rules and score is not None:
            min_val, max_val = validation_rules[test_name]
            if not (min_val <= score <= max_val):
                errors.append(f"Некорректное значение для {test_name}: {score} (должно быть {min_val}-{max_val})")
    
    return {'valid': len(errors) == 0, 'errors': errors}

# ============================================================================
# ФУНКЦИИ ИНТЕРПРЕТАЦИИ РЕЗУЛЬТАТОВ
# ============================================================================

def get_hads_interpretation(anxiety_score: int, depression_score: int) -> str:
    """Интерпретация результатов HADS"""
    def get_level(score: int) -> str:
        if score <= 7:
            return "норма"
        elif score <= 10:
            return "субклинически выраженные симптомы"
        else:
            return "клинически выраженные симптомы"
    
    anxiety_level = get_level(anxiety_score)
    depression_level = get_level(depression_score)
    
    result = f"<b>Тревога:</b> {anxiety_score} баллов - {anxiety_level}\n"
    result += f"<b>Депрессия:</b> {depression_score} баллов - {depression_level}\n\n"
    
    if anxiety_score > 10 or depression_score > 10:
        result += "🚨 <b>Рекомендация:</b> Рекомендуется консультация специалиста (психолога, психотерапевта) для дальнейшей оценки и возможной помощи."
    elif anxiety_score > 7 or depression_score > 7:
        result += "⚠️ <b>Рекомендация:</b> Обратите внимание на свое эмоциональное состояние. Рассмотрите возможность работы со стрессом, релаксационные техники."
    else:
        result += "✅ <b>Результат:</b> Ваши показатели тревоги и депрессии находятся в пределах нормы."
    
    if anxiety_score > 7 or depression_score > 7:
        result += "\n\n💡 <b>Связь с сердцем:</b> Тревога и депрессия повышают риск сердечно-сосудистых заболеваний в 1,5-2 раза. Управление стрессом - важная часть профилактики."
    
    return result

def get_burns_interpretation(score: int) -> str:
    """Интерпретация результатов теста Бернса"""
    if score <= 5:
        level = "минимальная депрессия"
        color = "🟢"
        recommendation = "✅ Ваше эмоциональное состояние в норме."
    elif score <= 10:
        level = "легкая депрессия"
        color = "🟡"
        recommendation = "💡 Легкие признаки сниженного настроения. Обратите внимание на режим дня, физическую активность и качество сна."
    elif score <= 25:
        level = "умеренная депрессия"
        color = "🟠"
        recommendation = "⚠️ Рекомендуется обратиться к специалисту для получения поддержки и консультации."
    elif score <= 50:
        level = "тяжелая депрессия"
        color = "🔴"
        recommendation = "🚨 Настоятельно рекомендуется консультация психотерапевта или психиатра."
    else:
        level = "крайне тяжелая депрессия"
        color = "🔴"
        recommendation = "🚨 Необходима немедленная помощь специалиста. Обратитесь к врачу как можно скорее."
    
    cardio_impact = ""
    if score > 10:
        cardio_impact = f"\n\n{color} <b>Влияние на сердце:</b> Депрессия увеличивает риск ИБС в 1,5-2 раза и повышает вероятность инфаркта. Лечение депрессии улучшает прогноз сердечно-сосудистых заболеваний."
    
    return f"<b>Уровень депрессии:</b> {level}\n\n{recommendation}{cardio_impact}"

def get_isi_interpretation(score: int) -> str:
    """Интерпретация результатов теста ISI"""
    if score <= 7:
        level = "отсутствие клинически значимой бессонницы"
        color = "🟢"
        recommendation = "✅ У вас хорошее качество сна."
    elif score <= 14:
        level = "подпороговая бессонница"
        color = "🟡"
        recommendation = "💡 Легкие нарушения сна. Обратите внимание на гигиену сна: регулярный режим, комфортная обстановка в спальне."
    elif score <= 21:
        level = "клиническая бессонница умеренной тяжести"
        color = "🟠"
        recommendation = "⚠️ Рекомендуется консультация врача для оценки причин нарушений сна и подбора лечения."
    else:
        level = "тяжелая клиническая бессонница"
        color = "🔴"
        recommendation = "🚨 Необходима консультация сомнолога или невролога для комплексного обследования и лечения."
    
    sleep_tips = f"""\n\n{color} <b>Влияние на сердце:</b> Хроническая бессонница повышает риск:
• Артериальной гипертензии в 2-3 раза
• ИБС в 1,5 раза
• Инфаркта миокарда в 1,6 раза

💡 <b>Гигиена сна:</b>
• Ложитесь спать в одно время
• Температура в спальне 18-20°C
• Избегайте кофеина после 14:00
• Провести час до сна без гаджетов"""
    
    return f"<b>Качество сна:</b> {level}\n\n{recommendation}{sleep_tips}"

def get_stop_bang_interpretation(score: int) -> str:
    """Интерпретация результатов теста STOP-BANG"""
    if score <= 2:
        risk = "низкий риск"
        color = "🟢"
        recommendation = "✅ У вас низкий риск синдрома обструктивного апноэ сна."
    elif score <= 4:
        risk = "умеренный риск"
        color = "🟡"
        recommendation = "⚠️ Умеренный риск апноэ сна. Рекомендуется обратиться к врачу для дополнительного обследования."
    else:
        risk = "высокий риск"
        color = "🔴"
        recommendation = "🚨 Высокий риск синдрома обструктивного апноэ сна. Настоятельно рекомендуется консультация сомнолога и полисомнография."
    
    cardio_risks = f"""\n\n{color} <b>Риски для сердца при апноэ сна:</b>
• Артериальная гипертензия - в 2,9 раза чаще
• Инфаркт миокарда - в 5 раз чаще
• Инсульт - в 4 раза чаще
• Внезапная смерть во сне - в 2,6 раза чаще
• Фибрилляция предсердий - в 4 раза чаще"""
    
    return f"<b>Риск апноэ сна:</b> {risk}\n\n{recommendation}{cardio_risks}"

def get_ess_interpretation(score: int) -> str:
    """Интерпретация результатов теста ESS"""
    if score <= 10:
        level = "нормальная дневная сонливость"
        color = "🟢"
        recommendation = "✅ Уровень дневной сонливости в пределах нормы."
    elif score <= 12:
        level = "легкая дневная сонливость"
        color = "🟡"
        recommendation = "💡 Легкая дневная сонливость. Обратите внимание на качество ночного сна и режим дня."
    elif score <= 15:
        level = "умеренная дневная сонливость"
        color = "🟠"
        recommendation = "⚠️ Умеренная дневная сонливость. Рекомендуется консультация врача для выявления причин."
    else:
        level = "выраженная дневная сонливость"
        color = "🔴"
        recommendation = "🚨 Выраженная дневная сонливость. Необходима консультация сомнолога для исключения нарушений сна."
    
    safety_info = f"""\n\n{color} <b>Безопасность и риски:</b>
• При ESS >15: риск засыпания за рулем в 7 раз выше
• Повышенный риск производственного травматизма
• Снижение когнитивных функций и работоспособности

🚗 <b>Важно:</b> При высоких показателях ESS избегайте вождения без консультации врача!

💡 <b>Причины сонливости:</b>
• Синдром апноэ сна
• Недостаток ночного сна
• Побочные эффекты лекарств"""
    
    return f"<b>Дневная сонливость:</b> {level}\n\n{recommendation}{safety_info}"

def get_fagerstrom_interpretation(score: int) -> str:
    """Интерпретация результатов теста Фагерстрема"""
    if score <= 2:
        level = "очень слабая зависимость"
        color = "🟡"
        recommendation = "💡 У вас минимальная никотиновая зависимость. Отличное время для отказа от курения!"
        success_rate = "85-90%"
    elif score <= 4:
        level = "слабая зависимость"
        color = "🟠"
        recommendation = "⚠️ Слабая никотиновая зависимость. Рекомендуется обратиться к врачу за помощью в отказе от курения."
        success_rate = "70-80%"
    elif score <= 6:
        level = "средняя зависимость"
        color = "🔴"
        recommendation = "🚨 Средняя никотиновая зависимость. Необходима профессиональная помощь и медикаментозная поддержка."
        success_rate = "50-60%"
    elif score <= 7:
        level = "сильная зависимость"
        color = "🔴"
        recommendation = "🚨 Сильная никотиновая зависимость. Настоятельно рекомендуется комплексная программа отказа под наблюдением врача."
        success_rate = "30-40%"
    else:
        level = "очень сильная зависимость"
        color = "🔴"
        recommendation = "🚨 Очень сильная никотиновая зависимость. Необходима срочная медицинская помощь в отказе от курения."
        success_rate = "15-25%"
    
    cardio_impact = f"""\n\n{color} <b>Влияние курения на сердце:</b>
• Риск ИБС увеличивается в 2-4 раза
• Риск инфаркта миокарда - в 2-6 раз
• Риск инсульта - в 2-3 раза
• Ускоряет развитие атеросклероза
• Повышает артериальное давление

🎯 <b>Шансы на успех при отказе:</b> {success_rate}"""
    
    return f"<b>Никотиновая зависимость:</b> {level}\n\n{recommendation}{cardio_impact}"

def get_audit_interpretation(score: int) -> str:
    """Интерпретация результатов теста AUDIT"""
    if score <= 7:
        level = "низкий риск"
        color = "🟢"
        recommendation = "✅ Ваше потребление алкоголя находится в безопасных пределах."
    elif score <= 15:
        level = "опасное потребление"
        color = "🟡"
        recommendation = "⚠️ Опасное потребление алкоголя. Рекомендуется снизить употребление и обратиться к врачу за консультацией."
    elif score <= 19:
        level = "вредное потребление"
        color = "🟠"
        recommendation = "🚨 Вредное потребление алкоголя. Необходима консультация нарколога и программа снижения потребления."
    else:
        level = "возможная алкогольная зависимость"
        color = "🔴"
        recommendation = "🚨 Высокий риск алкогольной зависимости. Настоятельно рекомендуется срочная консультация нарколога."
    
    cardio_info = f"""\n\n{color} <b>Влияние алкоголя на сердечно-сосудистую систему:</b>

<b>Безопасные дозы:</b>
• Мужчины: не более 14 единиц в неделю
• Женщины: не более 7 единиц в неделю
• 1 единица = 10г чистого алкоголя = 100мл вина или 250мл пива

<b>Риски чрезмерного употребления:</b>
• Артериальная гипертензия
• Кардиомиопатия
• Аритмии (особенно фибрилляция предсердий)
• Инсульт
• Внезапная сердечная смерть
"""
    
    return f"<b>Потребление алкоголя:</b> {level}\n\n{recommendation}{cardio_info}"

# ============================================================================
# КОМПЛЕКСНАЯ ОЦЕНКА РИСКОВ
# ============================================================================

def calculate_overall_cardiovascular_risk(user_data: Dict, survey_data: Dict, test_data: Dict) -> Dict[str, Any]:
    """Расчет общего сердечно-сосудистого риска"""
    risk_factors = []
    risk_score = 0
    
    # Демографические факторы риска
    age = survey_data.get('age', 0)
    if age > 45:
        risk_factors.append("Возраст старше 45 лет")
        risk_score += 2
    elif age > 35:
        risk_factors.append("Возраст старше 35 лет")
        risk_score += 1
    
    if survey_data.get('gender') == 'Мужской':
        risk_factors.append("Мужской пол")
        risk_score += 1
    
    # Анамнестические факторы
    if survey_data.get('heart_disease') == 'Да':
        risk_factors.append("Заболевания сердца в анамнезе")
        risk_score += 4
    
    # Самооценка здоровья и риска
    health_rating = survey_data.get('health_rating', 10)
    if health_rating <= 5:
        risk_factors.append("Низкая самооценка здоровья")
        risk_score += 1
    
    cv_risk = survey_data.get('cv_risk', '')
    if cv_risk == 'очень высокий':
        risk_factors.append("Высокая самооценка сердечно-сосудистого риска")
        risk_score += 2
    elif cv_risk == 'высокий':
        risk_factors.append("Повышенная самооценка сердечно-сосудистого риска")
        risk_score += 1
    
    # Психоэмоциональные факторы
    hads_anxiety = test_data.get('hads_anxiety_score', 0)
    if hads_anxiety >= 11:
        risk_factors.append("Клинически значимая тревога")
        risk_score += 2
    elif hads_anxiety >= 8:
        risk_factors.append("Субклиническая тревога")
        risk_score += 1
    
    hads_depression = test_data.get('hads_depression_score', 0)
    if hads_depression >= 11:
        risk_factors.append("Клинически значимая депрессия")
        risk_score += 3
    elif hads_depression >= 8:
        risk_factors.append("Субклиническая депрессия")
        risk_score += 1
    
    burns_score = test_data.get('burns_score', 0)
    if burns_score >= 25:
        risk_factors.append("Выраженное эмоциональное выгорание")
        risk_score += 2
    elif burns_score >= 11:
        risk_factors.append("Умеренное эмоциональное выгорание")
        risk_score += 1
    
    # Нарушения сна
    isi_score = test_data.get('isi_score', 0)
    if isi_score >= 15:
        risk_factors.append("Клиническая бессонница")
        risk_score += 2
    elif isi_score >= 8:
        risk_factors.append("Субклиническая бессонница")
        risk_score += 1
    
    stop_bang_score = test_data.get('stop_bang_score', 0)
    if stop_bang_score >= 5:
        risk_factors.append("Высокий риск апноэ сна")
        risk_score += 3
    elif stop_bang_score >= 3:
        risk_factors.append("Умеренный риск апноэ сна")
        risk_score += 1
    
    ess_score = test_data.get('ess_score', 0)
    if ess_score >= 16:
        risk_factors.append("Выраженная дневная сонливость")
        risk_score += 1
    
    # Вредные привычки
    fagerstrom_score = test_data.get('fagerstrom_score', 0)
    if fagerstrom_score and fagerstrom_score >= 7:
        risk_factors.append("Сильная никотиновая зависимость")
        risk_score += 4
    elif fagerstrom_score and fagerstrom_score >= 5:
        risk_factors.append("Умеренная никотиновая зависимость")
        risk_score += 3
    elif fagerstrom_score and fagerstrom_score >= 3:
        risk_factors.append("Слабая никотиновая зависимость")
        risk_score += 2
    elif fagerstrom_score and fagerstrom_score > 0:
        risk_factors.append("Курение")
        risk_score += 1
    
    audit_score = test_data.get('audit_score', 0)
    if audit_score and audit_score >= 20:
        risk_factors.append("Возможная алкогольная зависимость")
        risk_score += 3
    elif audit_score and audit_score >= 16:
        risk_factors.append("Вредное употребление алкоголя")
        risk_score += 2
    elif audit_score and audit_score >= 8:
        risk_factors.append("Опасное употребление алкоголя")
        risk_score += 1
    
    # Определяем уровень риска
    if risk_score <= 3:
        risk_level = "НИЗКИЙ"
        risk_color = "🟢"
        recommendation = "Ваш риск сердечно-сосудистых заболеваний низкий. Продолжайте вести здоровый образ жизни и проходите профилактические осмотры."
    elif risk_score <= 7:
        risk_level = "УМЕРЕННЫЙ"
        risk_color = "🟡"
        recommendation = "У вас умеренный риск. Рекомендуется профилактическое обследование и коррекция выявленных факторов риска."
    elif risk_score <= 12:
        risk_level = "ВЫСОКИЙ"
        risk_color = "🟠"
        recommendation = "Высокий риск сердечно-сосудистых заболеваний. Необходима консультация кардиолога и активная профилактика."
    else:
        risk_level = "ОЧЕНЬ ВЫСОКИЙ"
        risk_color = "🔴"
        recommendation = "Очень высокий риск. Срочно обратитесь к кардиологу для комплексного обследования и лечения."
    
    return {
        'risk_level': risk_level,
        'risk_score': risk_score,
        'risk_factors': risk_factors,
        'risk_color': risk_color,
        'recommendation': recommendation,
        'factors_count': len(risk_factors)
    }

def generate_personalized_recommendations(risk_assessment: Dict, test_data: Dict) -> str:
    """Генерация персональных рекомендаций"""
    recommendations = []
    
    # Базовые рекомендации
    recommendations.append("🫀 <b>БАЗОВЫЕ РЕКОМЕНДАЦИИ ДЛЯ ЗДОРОВЬЯ СЕРДЦА:</b>")
    recommendations.append("• Регулярная физическая активность: минимум 150 минут в неделю")
    recommendations.append("• Средиземноморская диета: больше овощей, рыбы, оливкового масла")
    recommendations.append("• Контроль веса: ИМТ в пределах 18,5-24,9 кг/м²")
    recommendations.append("• Ограничение соли: не более 5г в день")
    recommendations.append("• Регулярное измерение артериального давления")
    
    # Специфические рекомендации
    hads_anxiety = test_data.get('hads_anxiety_score', 0)
    hads_depression = test_data.get('hads_depression_score', 0)
    
    if hads_anxiety >= 8 or hads_depression >= 8:
        recommendations.append("\n😰 <b>УПРАВЛЕНИЕ СТРЕССОМ И НАСТРОЕНИЕМ:</b>")
        recommendations.append("• Техники релаксации: медитация, глубокое дыхание")
        recommendations.append("• Регулярная физическая активность для снижения стресса")
        recommendations.append("• Достаточный сон: 7-9 часов в сутки")
        recommendations.append("• Социальная поддержка: общение с близкими")
        
        if hads_anxiety >= 11 or hads_depression >= 11:
            recommendations.append("• 🚨 ОБЯЗАТЕЛЬНО: консультация психотерапевта")
    
    isi_score = test_data.get('isi_score', 0)
    if isi_score >= 8:
        recommendations.append("\n😴 <b>УЛУЧШЕНИЕ КАЧЕСТВА СНА:</b>")
        recommendations.append("• Соблюдение режима: ложиться и вставать в одно время")
        recommendations.append("• Комфортная среда: температура 18-20°C, темнота, тишина")
        recommendations.append("• Избегание кофеина после 14:00")
        recommendations.append("• Отказ от гаджетов за 1 час до сна")
        recommendations.append("• Релаксация перед сном: чтение, легкая музыка")
        
        if isi_score >= 15:
            recommendations.append("• 🚨 ОБЯЗАТЕЛЬНО: консультация сомнолога")
    
    stop_bang_score = test_data.get('stop_bang_score', 0)
    if stop_bang_score >= 3:
        recommendations.append("\n😪 <b>ПРОФИЛАКТИКА АПНОЭ СНА:</b>")
        recommendations.append("• Снижение веса при ожирении")
        recommendations.append("• Сон на боку (не на спине)")
        recommendations.append("• Отказ от алкоголя за 3 часа до сна")
        recommendations.append("• Избегание седативных препаратов")
        
        if stop_bang_score >= 5:
            recommendations.append("• 🚨 СРОЧНО: обследование у сомнолога (полисомнография)")
    
    fagerstrom_score = test_data.get('fagerstrom_score')
    if fagerstrom_score and fagerstrom_score > 0:
        recommendations.append("\n🚭 <b>ОТКАЗ ОТ КУРЕНИЯ:</b>")
        recommendations.append("• Назначьте дату отказа от курения")
        recommendations.append("• Обратитесь к врачу за медикаментозной поддержкой")
        recommendations.append("• Используйте никотинзаместительную терапию")
        recommendations.append("• Избегайте триггеров: места и ситуации курения")
        
        if fagerstrom_score >= 5:
            recommendations.append("• 🚨 ОБЯЗАТЕЛЬНО: комплексная программа в наркологической клинике")
    
    audit_score = test_data.get('audit_score', 0)
    if audit_score >= 8:
        recommendations.append("\n🍷 <b>КОНТРОЛЬ УПОТРЕБЛЕНИЯ АЛКОГОЛЯ:</b>")
        recommendations.append("• Ведите дневник употребления алкоголя")
        recommendations.append("• Установите дни полного воздержания")
        recommendations.append("• Не превышайте безопасные дозы")
        recommendations.append("• Замените алкогольные напитки безалкогольными")
        
        if audit_score >= 16:
            recommendations.append("• 🚨 ОБЯЗАТЕЛЬНО: консультация нарколога")
    
    # Рекомендации по уровню риска
    risk_level = risk_assessment.get('risk_level', 'НИЗКИЙ')
    
    if risk_level in ['ВЫСОКИЙ', 'ОЧЕНЬ ВЫСОКИЙ']:
            recommendations.append("\n🏥 <b>ДОПОЛНИТЕЛЬНЫЕ МЕРЫ ПРИ ВЫСОКОМ РИСКЕ:</b>")
            recommendations.append("• Консультация кардиолога в течение месяца")
            recommendations.append("• Ежедневное измерение АД дома")
            recommendations.append("• Анализы крови каждые 3-6 месяцев")
            recommendations.append("• ЭКГ каждые 6 месяцев")
            recommendations.append("• ЭхоКГ и УЗИ сосудов по показаниям")
            recommendations.append("• Рассмотрение профилактической терапии")
        
    # Экстренные ситуации
    recommendations.append("\n🚨 <b>КОГДА СРОЧНО ОБРАЩАТЬСЯ К ВРАЧУ:</b>")
    recommendations.append("• Боль в груди, особенно с иррадиацией в руку, шею")
    recommendations.append("• Одышка в покое или при небольшой нагрузке")
    recommendations.append("• АД выше 180/110 мм рт.ст.")
    recommendations.append("• Учащенное сердцебиение в покое (>100 уд/мин)")
    recommendations.append("• Головокружение с потерей сознания")
    recommendations.append("• Отеки ног, особенно к вечеру")
    
    return "\n".join(recommendations)

def create_comprehensive_report(user_data: Dict, survey_data: Dict, test_data: Dict) -> str:
    """Создание комплексного отчета по результатам диагностики"""
    
    # Расчет общего риска
    risk_assessment = calculate_overall_cardiovascular_risk(user_data, survey_data, test_data)
    
    # Персональные рекомендации
    recommendations = generate_personalized_recommendations(risk_assessment, test_data)
    
    # Заголовок отчета
    report = f"""📊 <b>ПЕРСОНАЛЬНЫЙ ОТЧЕТ ПО КАРДИОРИСКУ</b>

👤 <b>Участник:</b> {user_data.get('name', 'Пользователь')}
📅 <b>Дата:</b> {datetime.now().strftime('%d.%m.%Y')}

{risk_assessment['risk_color']} <b>ОБЩИЙ УРОВЕНЬ РИСКА: {risk_assessment['risk_level']}</b>
<b>Количество баллов риска:</b> {risk_assessment['risk_score']}
<b>Выявленных факторов риска:</b> {risk_assessment['factors_count']}

<b>🎯 КЛЮЧЕВАЯ РЕКОМЕНДАЦИЯ:</b>
{risk_assessment['recommendation']}

📋 <b>ВЫЯВЛЕННЫЕ ФАКТОРЫ РИСКА:</b>"""

    if risk_assessment['risk_factors']:
        for i, factor in enumerate(risk_assessment['risk_factors'], 1):
            report += f"\n{i}. {factor}"
    else:
        report += "\n✅ Значимых факторов риска не выявлено"
    
    # Детализированные результаты тестов
    report += "\n\n📈 <b>ДЕТАЛЬНЫЕ РЕЗУЛЬТАТЫ ТЕСТОВ:</b>"
    
    # HADS
    hads_anxiety = test_data.get('hads_anxiety_score')
    hads_depression = test_data.get('hads_depression_score')
    if hads_anxiety is not None and hads_depression is not None:
        report += f"\n\n🧠 <b>Тревога и депрессия (HADS):</b>"
        report += f"\n• Тревога: {hads_anxiety} баллов"
        report += f"\n• Депрессия: {hads_depression} баллов"
    
    # Burns
    burns_score = test_data.get('burns_score')
    if burns_score is not None:
        report += f"\n\n💔 <b>Эмоциональное выгорание (Бернс):</b> {burns_score} баллов"
    
    # ISI
    isi_score = test_data.get('isi_score')
    if isi_score is not None:
        report += f"\n\n😴 <b>Качество сна (ISI):</b> {isi_score} баллов"
    
    # STOP-BANG
    stop_bang_score = test_data.get('stop_bang_score')
    if stop_bang_score is not None:
        report += f"\n\n😪 <b>Риск апноэ сна (STOP-BANG):</b> {stop_bang_score} баллов"
    
    # ESS
    ess_score = test_data.get('ess_score')
    if ess_score is not None:
        report += f"\n\n🥱 <b>Дневная сонливость (ESS):</b> {ess_score} баллов"
    
    # Fagerstrom
    fagerstrom_score = test_data.get('fagerstrom_score')
    if fagerstrom_score is not None:
        report += f"\n\n🚬 <b>Никотиновая зависимость (Фагерстрем):</b> {fagerstrom_score} баллов"
    elif test_data.get('fagerstrom_skipped'):
        report += f"\n\n🚬 <b>Никотиновая зависимость:</b> не курит"
    
    # AUDIT
    audit_score = test_data.get('audit_score')
    if audit_score is not None:
        report += f"\n\n🍷 <b>Употребление алкоголя (AUDIT):</b> {audit_score} баллов"
    elif test_data.get('audit_skipped'):
        report += f"\n\n🍷 <b>Употребление алкоголя:</b> не употребляет"
    
    # Рекомендации
    report += f"\n\n{recommendations}"
    
    # План действий
    report += f"""\n\n📋 <b>ПЛАН ДЕЙСТВИЙ НА БЛИЖАЙШИЙ МЕСЯЦ:</b>

🎯 <b>ПРИОРИТЕТ 1:</b>"""
    
    priority_actions = []
    
    # Определяем приоритетные действия
    if test_data.get('fagerstrom_score', 0) >= 3:
        priority_actions.append("• Начать процесс отказа от курения")
    
    if test_data.get('stop_bang_score', 0) >= 5:
        priority_actions.append("• Записаться к сомнологу на обследование")
    
    if test_data.get('hads_anxiety_score', 0) >= 11 or test_data.get('hads_depression_score', 0) >= 11:
        priority_actions.append("• Обратиться к психотерапевту или психиатру")
    
    if risk_assessment['risk_level'] in ['ВЫСОКИЙ', 'ОЧЕНЬ ВЫСОКИЙ']:
        priority_actions.append("• Записаться к кардиологу в течение 2 недель")
        priority_actions.append("• Начать ежедневный контроль АД")
    
    if test_data.get('isi_score', 0) >= 15:
        priority_actions.append("• Обратиться к врачу по поводу бессонницы")
    
    if not priority_actions:
        priority_actions.append("• Продолжать здоровый образ жизни")
        priority_actions.append("• Пройти профилактический осмотр у терапевта")
    
    report += "\n" + "\n".join(priority_actions)
    
    report += f"""\n\n🎯 <b>ПРИОРИТЕТ 2 (в течение месяца):</b>
• Оптимизировать питание (средиземноморская диета)
• Увеличить физическую активность до 150 мин/неделю
• Наладить режим сна (7-9 часов)
• Освоить техники управления стрессом
• Сдать базовые анализы крови"""
    
    return report

# ============================================================================
# ПОПУЛЯЦИОННАЯ АНАЛИТИКА
# ============================================================================

def analyze_population_risk(all_users_data: List[Dict]) -> str:
    """Анализ рисков на уровне популяции"""
    total_users = len(all_users_data)
    if total_users == 0:
        return "Нет данных для анализа"
    
    # Инициализация счетчиков
    risk_distribution = {"НИЗКИЙ": 0, "УМЕРЕННЫЙ": 0, "ВЫСОКИЙ": 0, "ОЧЕНЬ ВЫСОКИЙ": 0}
    age_groups = {"18-30": 0, "31-45": 0, "46-60": 0, "60+": 0}
    gender_distribution = {"Мужской": 0, "Женский": 0}
    common_factors = {}
    
    # Статистика по тестам
    test_stats = {
        'hads_high_anxiety': 0,
        'hads_high_depression': 0,
        'burns_moderate_plus': 0,
        'isi_insomnia': 0,
        'stop_bang_high_risk': 0,
        'ess_excessive': 0,
        'fagerstrom_dependent': 0,
        'audit_risky': 0
    }
    
    for user_data in all_users_data:
        survey_data = user_data.get('survey', {})
        test_data = user_data.get('tests', {})
        user_info = user_data.get('user', {})
        
        # Анализ риска
        risk_assessment = calculate_overall_cardiovascular_risk(user_info, survey_data, test_data)
        risk_distribution[risk_assessment['risk_level']] += 1
        
        # Возрастные группы
        age = survey_data.get('age', 0)
        if 18 <= age <= 30:
            age_groups["18-30"] += 1
        elif 31 <= age <= 45:
            age_groups["31-45"] += 1
        elif 46 <= age <= 60:
            age_groups["46-60"] += 1
        elif age > 60:
            age_groups["60+"] += 1
        
        # Пол
        gender = survey_data.get('gender', '')
        if gender in gender_distribution:
            gender_distribution[gender] += 1
        
        # Факторы риска
        for factor in risk_assessment['risk_factors']:
            common_factors[factor] = common_factors.get(factor, 0) + 1
        
        # Статистика тестов
        if test_data.get('hads_anxiety_score', 0) >= 11:
            test_stats['hads_high_anxiety'] += 1
        if test_data.get('hads_depression_score', 0) >= 11:
            test_stats['hads_high_depression'] += 1
        if test_data.get('burns_score', 0) >= 11:
            test_stats['burns_moderate_plus'] += 1
        if test_data.get('isi_score', 0) >= 8:
            test_stats['isi_insomnia'] += 1
        if test_data.get('stop_bang_score', 0) >= 5:
            test_stats['stop_bang_high_risk'] += 1
        if test_data.get('ess_score', 0) >= 16:
            test_stats['ess_excessive'] += 1
        if test_data.get('fagerstrom_score', 0) >= 5:
            test_stats['fagerstrom_dependent'] += 1
        if test_data.get('audit_score', 0) >= 8:
            test_stats['audit_risky'] += 1
    
    # Формирование отчета
    report = f"""📈 <b>ПОПУЛЯЦИОННЫЙ АНАЛИЗ КАРДИОРИСКА</b>
    
👥 <b>Общее количество участников:</b> {total_users}

📊 <b>РАСПРЕДЕЛЕНИЕ ПО УРОВНЮ РИСКА:</b>"""
    
    for risk_level, count in risk_distribution.items():
        percentage = (count / total_users) * 100
        emoji = {"НИЗКИЙ": "🟢", "УМЕРЕННЫЙ": "🟡", "ВЫСОКИЙ": "🟠", "ОЧЕНЬ ВЫСОКИЙ": "🔴"}
        report += f"\n{emoji.get(risk_level, '•')} {risk_level}: {count} чел. ({percentage:.1f}%)"
    
    report += f"""\n\n👨‍👩‍👧‍👦 <b>РАСПРЕДЕЛЕНИЕ ПО ПОЛУ:</b>"""
    for gender, count in gender_distribution.items():
        percentage = (count / total_users) * 100 if total_users > 0 else 0
        report += f"\n• {gender}: {count} чел. ({percentage:.1f}%)"
    
    report += f"""\n\n🎂 <b>ВОЗРАСТНЫЕ ГРУППЫ:</b>"""
    for age_group, count in age_groups.items():
        percentage = (count / total_users) * 100 if total_users > 0 else 0
        report += f"\n• {age_group} лет: {count} чел. ({percentage:.1f}%)"
    
    # Топ-5 факторов риска
    sorted_factors = sorted(common_factors.items(), key=lambda x: x[1], reverse=True)[:5]
    if sorted_factors:
        report += f"""\n\n⚠️ <b>НАИБОЛЕЕ ЧАСТЫЕ ФАКТОРЫ РИСКА:</b>"""
        for i, (factor, count) in enumerate(sorted_factors, 1):
            percentage = (count / total_users) * 100
            report += f"\n{i}. {factor}: {count} чел. ({percentage:.1f}%)"
    
    # Статистика по тестам
    report += f"""\n\n🧪 <b>СТАТИСТИКА ПО ТЕСТАМ:</b>"""
    test_labels = {
        'hads_high_anxiety': 'Клиническая тревога',
        'hads_high_depression': 'Клиническая депрессия',
        'burns_moderate_plus': 'Умеренное+ выгорание',
        'isi_insomnia': 'Нарушения сна',
        'stop_bang_high_risk': 'Высокий риск апноэ',
        'ess_excessive': 'Чрезмерная сонливость',
        'fagerstrom_dependent': 'Никотиновая зависимость',
        'audit_risky': 'Проблемы с алкоголем'
    }
    
    for test_key, count in test_stats.items():
        if count > 0:
            percentage = (count / total_users) * 100
            label = test_labels.get(test_key, test_key)
            report += f"\n• {label}: {count} чел. ({percentage:.1f}%)"
    
    # Выводы и рекомендации
    high_risk_percentage = (risk_distribution["ВЫСОКИЙ"] + risk_distribution["ОЧЕНЬ ВЫСОКИЙ"]) / total_users * 100
    
    report += f"""\n\n📋 </b>КЛЮЧЕВЫЕ ВЫВОДЫ:</b>"""
    
    if high_risk_percentage > 30:
        report += f"\n🔴 Высокая доля участников с повышенным риском ({high_risk_percentage:.1f}%)"
    elif high_risk_percentage > 15:
        report += f"\n🟡 Умеренная доля участников с повышенным риском ({high_risk_percentage:.1f}%)"
    else:
        report += f"\n🟢 Низкая доля участников с повышенным риском ({high_risk_percentage:.1f}%)"
    
    # Приоритетные проблемы
    priority_issues = []
    if test_stats['stop_bang_high_risk'] / total_users > 0.2:
        priority_issues.append("нарушения дыхания во сне")
    if test_stats['hads_high_anxiety'] / total_users > 0.15:
        priority_issues.append("тревожные расстройства")
    if test_stats['hads_high_depression'] / total_users > 0.15:
        priority_issues.append("депрессивные расстройства")
    if test_stats['fagerstrom_dependent'] / total_users > 0.1:
        priority_issues.append("никотиновая зависимость")
    
    if priority_issues:
        report += f"\n\n🎯 <b>ПРИОРИТЕТНЫЕ ПРОБЛЕМЫ:</b> {', '.join(priority_issues)}"
    
    return report

# ============================================================================
# ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
# ============================================================================

def get_test_norms() -> Dict[str, Dict[str, Tuple[int, int]]]:
    """Получить нормативные значения всех тестов"""
    return TEST_NORMS

def get_risk_category(test_name: str, score: int) -> str:
    """Определить категорию риска для конкретного теста"""
    if test_name not in TEST_NORMS:
        return "неизвестно"
    
    norms = TEST_NORMS[test_name]
    for category, (min_val, max_val) in norms.items():
        if min_val <= score <= max_val:
            return category
    
    return "вне нормы"

def calculate_test_percentile(test_name: str, score: int, population_scores: List[int]) -> int:
    """Рассчитать процентиль для результата теста"""
    if not population_scores:
        return 50
    
    sorted_scores = sorted(population_scores)
    position = sum(1 for s in sorted_scores if s <= score)
    percentile = (position / len(sorted_scores)) * 100
    
    return int(percentile)

def export_test_summary(user_data: Dict, survey_data: Dict, test_data: Dict) -> Dict[str, Any]:
    """Экспорт краткой сводки для внешних систем"""
    risk_assessment = calculate_overall_cardiovascular_risk(user_data, survey_data, test_data)
    
    return {
        'user_id': user_data.get('telegram_id'),
        'name': user_data.get('name'),
        'assessment_date': datetime.now().isoformat(),
        'overall_risk': {
            'level': risk_assessment['risk_level'],
            'score': risk_assessment['risk_score'],
            'factors_count': risk_assessment['factors_count']
        },
        'test_results': {
            'hads_anxiety': test_data.get('hads_anxiety_score'),
            'hads_depression': test_data.get('hads_depression_score'),
            'burns': test_data.get('burns_score'),
            'isi': test_data.get('isi_score'),
            'stop_bang': test_data.get('stop_bang_score'),
            'ess': test_data.get('ess_score'),
            'fagerstrom': test_data.get('fagerstrom_score'),
            'audit': test_data.get('audit_score')
        },
        'risk_factors': risk_assessment['risk_factors'],
        'urgent_referrals': _get_urgent_referrals(test_data),
        'recommendations_summary': _get_recommendations_summary(risk_assessment, test_data)
    }

def _get_urgent_referrals(test_data: Dict) -> List[str]:
    """Определить срочные направления к специалистам"""
    referrals = []
    
    if test_data.get('hads_anxiety_score', 0) >= 11 or test_data.get('hads_depression_score', 0) >= 11:
        referrals.append("психотерапевт")
    
    if test_data.get('stop_bang_score', 0) >= 5:
        referrals.append("сомнолог")
    
    if test_data.get('isi_score', 0) >= 15:
        referrals.append("невролог")
    
    if test_data.get('fagerstrom_score', 0) >= 7:
        referrals.append("нарколог")
    
    if test_data.get('audit_score', 0) >= 20:
        referrals.append("нарколог")
    
    return referrals

def _get_recommendations_summary(risk_assessment: Dict, test_data: Dict) -> List[str]:
    """Краткая сводка рекомендаций"""
    recommendations = []
    
    if risk_assessment['risk_level'] in ['ВЫСОКИЙ', 'ОЧЕНЬ ВЫСОКИЙ']:
        recommendations.append("консультация кардиолога")
        recommendations.append("ежедневный контроль АД")
    
    if test_data.get('fagerstrom_score', 0) > 0:
        recommendations.append("отказ от курения")
    
    if test_data.get('audit_score', 0) >= 8:
        recommendations.append("снижение употребления алкоголя")
    
    if test_data.get('isi_score', 0) >= 8:
        recommendations.append("улучшение гигиены сна")
    
    if test_data.get('hads_anxiety_score', 0) >= 8:
        recommendations.append("управление стрессом")
    
    return recommendations

def get_risk_category(test_type: str, score: int) -> str:
    """Определение категории риска по баллам теста"""
    
    if test_type == 'hads_anxiety':
        if score <= 7:
            return 'норма'
        elif score <= 10:
            return 'субклиническая'
        else:
            return 'клиническая'
    
    elif test_type == 'hads_depression':
        if score <= 7:
            return 'норма'
        elif score <= 10:
            return 'субклиническая'
        else:
            return 'клиническая'
    
    elif test_type == 'burns':
        if score <= 5:
            return 'минимальная'
        elif score <= 10:
            return 'легкая'
        elif score <= 25:
            return 'умеренная'
        elif score <= 50:
            return 'тяжелая'
        else:
            return 'крайне_тяжелая'
    
    elif test_type == 'isi':
        if score <= 7:
            return 'нет_бессонницы'
        elif score <= 14:
            return 'подпороговая'
        elif score <= 21:
            return 'умеренная'
        else:
            return 'тяжелая'
    
    elif test_type == 'stop_bang':
        if score <= 2:
            return 'низкий'
        elif score <= 4:
            return 'умеренный'
        else:
            return 'высокий'
    
    elif test_type == 'ess':
        if score <= 10:
            return 'норма'
        elif score <= 12:
            return 'легкая'
        elif score <= 15:
            return 'умеренная'
        else:
            return 'выраженная'
    
    elif test_type == 'fagerstrom':
        if score <= 2:
            return 'очень_слабая'
        elif score <= 4:
            return 'слабая'
        elif score <= 6:
            return 'средняя'
        elif score <= 8:
            return 'сильная'
        else:
            return 'очень_сильная'
    
    elif test_type == 'audit':
        if score <= 7:
            return 'низкий'
        elif score <= 15:
            return 'опасное'
        elif score <= 19:
            return 'вредное'
        else:
            return 'зависимость'
    
    return 'неопределено'

def calculate_overall_cardiovascular_risk(user_data: dict, survey_data: dict, test_data: dict) -> dict:
    """Расчет общего сердечно-сосудистого риска"""
    
    risk_factors = []
    risk_score = 0
    
    # Демографические факторы риска
    age = survey_data.get('age', 0)
    if age > 45:
        risk_factors.append("Возраст старше 45 лет")
        risk_score += 2
    elif age > 35:
        risk_factors.append("Возраст старше 35 лет")
        risk_score += 1
    
    if survey_data.get('gender') == 'Мужской':
        risk_factors.append("Мужской пол")
        risk_score += 1
    
    # Анамнестические факторы
    if survey_data.get('heart_disease') == 'Да':
        risk_factors.append("Заболевания сердца в анамнезе")
        risk_score += 4
    
    # Самооценка здоровья и риска
    health_rating = survey_data.get('health_rating', 10)
    if health_rating <= 5:
        risk_factors.append("Низкая самооценка здоровья")
        risk_score += 1
    
    cv_risk = survey_data.get('cv_risk', '')
    if cv_risk == 'очень высокий':
        risk_factors.append("Высокая самооценка сердечно-сосудистого риска")
        risk_score += 2
    elif cv_risk == 'высокий':
        risk_factors.append("Повышенная самооценка сердечно-сосудистого риска")
        risk_score += 1
    
    # Психоэмоциональные факторы
    hads_anxiety = test_data.get('hads_anxiety_score', 0)
    if hads_anxiety and hads_anxiety >= 11:
        risk_factors.append("Клинически значимая тревога")
        risk_score += 2
    elif hads_anxiety and hads_anxiety >= 8:
        risk_factors.append("Субклиническая тревога")
        risk_score += 1
    
    hads_depression = test_data.get('hads_depression_score', 0)
    if hads_depression and hads_depression >= 11:
        risk_factors.append("Клинически значимая депрессия")
        risk_score += 3
    elif hads_depression and hads_depression >= 8:
        risk_factors.append("Субклиническая депрессия")
        risk_score += 1
    
    burns_score = test_data.get('burns_score', 0)
    if burns_score and burns_score >= 25:
        risk_factors.append("Выраженное эмоциональное выгорание")
        risk_score += 2
    elif burns_score and burns_score >= 11:
        risk_factors.append("Умеренное эмоциональное выгорание")
        risk_score += 1
    
    # Нарушения сна
    isi_score = test_data.get('isi_score', 0)
    if isi_score and isi_score >= 15:
        risk_factors.append("Клиническая бессонница")
        risk_score += 2
    elif isi_score and isi_score >= 8:
        risk_factors.append("Субклиническая бессонница")
        risk_score += 1
    
    stop_bang_score = test_data.get('stop_bang_score', 0)
    if stop_bang_score and stop_bang_score >= 5:
        risk_factors.append("Высокий риск апноэ сна")
        risk_score += 3
    elif stop_bang_score and stop_bang_score >= 3:
        risk_factors.append("Умеренный риск апноэ сна")
        risk_score += 1
    
    ess_score = test_data.get('ess_score', 0)
    if ess_score and ess_score >= 16:
        risk_factors.append("Выраженная дневная сонливость")
        risk_score += 1
    
    # Вредные привычки
    fagerstrom_score = test_data.get('fagerstrom_score')
    if fagerstrom_score and fagerstrom_score >= 7:
        risk_factors.append("Сильная никотиновая зависимость")
        risk_score += 4
    elif fagerstrom_score and fagerstrom_score >= 5:
        risk_factors.append("Умеренная никотиновая зависимость")
        risk_score += 3
    elif fagerstrom_score and fagerstrom_score >= 3:
        risk_factors.append("Слабая никотиновая зависимость")
        risk_score += 2
    elif fagerstrom_score and fagerstrom_score > 0:
        risk_factors.append("Курение")
        risk_score += 1
    
    audit_score = test_data.get('audit_score')
    if audit_score and audit_score >= 20:
        risk_factors.append("Возможная алкогольная зависимость")
        risk_score += 3
    elif audit_score and audit_score >= 16:
        risk_factors.append("Вредное употребление алкоголя")
        risk_score += 2
    elif audit_score and audit_score >= 8:
        risk_factors.append("Опасное употребление алкоголя")
        risk_score += 1
    
    # Определяем уровень риска
    if risk_score <= 3:
        risk_level = "НИЗКИЙ"
        risk_color = "🟢"
        recommendation = "Ваш риск сердечно-сосудистых заболеваний низкий. Продолжайте вести здоровый образ жизни."
    elif risk_score <= 6:
        risk_level = "УМЕРЕННЫЙ"
        risk_color = "🟡"
        recommendation = "У вас умеренный риск. Рекомендуется консультация кардиолога и коррекция образа жизни."
    elif risk_score <= 10:
        risk_level = "ВЫСОКИЙ"
        risk_color = "🟠"
        recommendation = "Высокий риск! Необходима срочная консультация кардиолога и комплексное обследование."
    else:
        risk_level = "ОЧЕНЬ ВЫСОКИЙ"
        risk_color = "🔴"
        recommendation = "Критически высокий риск! Немедленно обратитесь к кардиологу для экстренного обследования."
    
    return {
        'risk_score': risk_score,
        'risk_level': risk_level,
        'risk_color': risk_color,
        'factors_count': len(risk_factors),
        'risk_factors': risk_factors,
        'recommendation': recommendation
    }