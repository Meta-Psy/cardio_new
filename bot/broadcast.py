"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker
–ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–∞ broadcast.py
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
import pytz
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_all_users, get_completed_users, get_uncompleted_users, log_broadcast

logger = logging.getLogger(__name__)

class BroadcastScheduler:
    def __init__(self, bot: Bot):
        self.bot = bot
        # –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        self.timezone = pytz.timezone('Europe/Moscow')
        # –î–∞—Ç–∞ –≤–µ–±–∏–Ω–∞—Ä–∞: 3 –∞–≤–≥—É—Å—Ç–∞ 2025, 12:00 –ú–°–ö
        self.webinar_date = self.timezone.localize(datetime(2025, 8, 3, 12, 0))
        self.running = False
        
        # –§–ª–∞–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.sent_broadcasts = set()
        
        logger.info(f"üìÖ –í–µ–±–∏–Ω–∞—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {self.webinar_date}")
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        self.running = True
        logger.info("üì° –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                await self.check_and_send_broadcasts()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 10 –º–∏–Ω—É—Ç
                await asyncio.sleep(600)
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("‚èπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_moscow_time(self) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
        return datetime.now(self.timezone)
    
    async def check_and_send_broadcasts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        now = self.get_moscow_time()
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
        broadcast_schedule = {
            # –ó–∞ –Ω–µ–¥–µ–ª—é –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞
            'week_before': self.webinar_date - timedelta(days=7),
            # –ó–∞ 3 –¥–Ω—è
            'three_days': self.webinar_date - timedelta(days=3),
            # –ó–∞ –¥–µ–Ω—å
            'one_day': self.webinar_date - timedelta(days=1),
            # –í –¥–µ–Ω—å –≤–µ–±–∏–Ω–∞—Ä–∞
            'three_hours': self.webinar_date - timedelta(hours=3),
            'two_hours': self.webinar_date - timedelta(hours=2),
            'one_hour': self.webinar_date - timedelta(hours=1),
            'fifteen_minutes': self.webinar_date - timedelta(minutes=15),
            'webinar_start': self.webinar_date,
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
        for broadcast_id, broadcast_time in broadcast_schedule.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –º–∏–Ω—É—Ç)
            time_diff = abs((now - broadcast_time).total_seconds())
            
            if time_diff < 300 and broadcast_id not in self.sent_broadcasts:  # 5 –º–∏–Ω—É—Ç
                logger.info(f"‚è∞ –í—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id}")
                await self.send_broadcast_by_type(broadcast_id)
                self.sent_broadcasts.add(broadcast_id)
    
    async def send_broadcast_by_type(self, broadcast_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Ç–∏–ø—É"""
        broadcast_functions = {
            'week_before': self.send_week_reminder,
            'three_days': self.send_three_days_reminder,
            'one_day': self.send_day_reminder,
            'three_hours': self.send_three_hours_reminder,
            'two_hours': self.send_two_hours_reminder,
            'one_hour': self.send_hour_reminder,
            'fifteen_minutes': self.send_fifteen_minutes_reminder,
            'webinar_start': self.send_start_reminder,
        }
        
        function = broadcast_functions.get(broadcast_type)
        if function:
            await function()
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_type}")
    
    def get_diagnostic_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –ü—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="start_diagnostic")],
            [InlineKeyboardButton(text="‚úÖ –£–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ", callback_data="already_completed")]
        ])
    
    async def send_week_reminder(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        text = """üìå –û—Å—Ç–∞–ª–∞—Å—å —Ä–æ–≤–Ω–æ –Ω–µ–¥–µ–ª—è –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞ ¬´–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª —Å –î–∏–∞–Ω–æ–π –ù–æ–≤–∏–∫–æ–≤–æ–π –∏ –ï–ª–µ–Ω–æ–π –£–¥–∞—á–∫–∏–Ω–æ–π.

üìÖ –í–µ–±–∏–Ω–∞—Ä ¬´–£–º–Ω—ã–π –ö–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª –ø—Ä–æ–π–¥—ë—Ç **3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö**.

‚úîÔ∏è –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, —É—á–∏—Ç—ã–≤–∞—é—â–∏—Ö –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å–∏–º–ø—Ç–æ–º—ã, —á—Ç–æ–±—ã –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –°–°–ó –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —à–∞–≥–∏ –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.

‚úîÔ∏è–£–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–æ–∫–∞–∑–∞–Ω–Ω–æ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–∞—Ç—å –∂–µ—Ä—Ç–≤–æ–π —Ä–∞–Ω–Ω–µ–≥–æ –∏–Ω—Ñ–∞—Ä–∫—Ç–∞ –∏–ª–∏ –∏–Ω—Å—É–ª—å—Ç–∞ –∏ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã.

‚úîÔ∏è –ë—É–¥–µ—Ç–µ –∑–Ω–∞—Ç—å, –∫–∞–∫ —Ä–∞–∑—É–º–Ω–æ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∑–¥–æ—Ä–æ–≤—å–µ: –Ω–∞—É—á–∏—Ç–µ—Å—å –≤—ã–¥–µ–ª—è—Ç—å –∏–∑ –ø–æ—Ç–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ, –±—É–¥–µ—Ç–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å, —á—Ç–æ —É–ø—É—Å–∫–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –∑–Ω–∞—á–∏–º–æ–µ –¥–ª—è —Å–µ–±—è –∏ –±–ª–∏–∑–∫–∏—Ö.

–í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –≥—Ä–∞–º–æ—Ç–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–¥—Ü–µ –∑–¥–æ—Ä–æ–≤—ã–º, –∞ –∂–∏–∑–Ω—å –¥–æ–ª–≥–æ–π –∏ –∞–∫—Ç–∏–≤–Ω–æ–π ‚Äî –¥–ª—è —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö

üìç –í—Å—ë –±—É–¥–µ—Ç –∑–¥–µ—Å—å, –≤ –±–æ—Ç–µ ‚Äî –∑–∞–ø–∏—Å–∏, —Å—Å—ã–ª–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –±–æ–Ω—É—Å—ã.

–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ—â—ë —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ ‚Äï —Ç–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–≤–ª–µ—á—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –∏–∑ –≤–µ–±–∏–Ω–∞—Ä–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã üéÅ"""
        
        await self.broadcast_to_users(text, self.get_diagnostic_keyboard(), "week_before")
    
    async def send_three_days_reminder(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞ 3 –¥–Ω—è –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        text = """üîπ üóìÔ∏è –î–æ –≤–µ–±–∏–Ω–∞—Ä–∞ ¬´–£–º–Ω—ã–π –ö–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª –æ—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è.

–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ª–µ–∫—Ü–∏—è. –≠—Ç–æ —á—ë—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–Ω—Ñ–∞—Ä–∫—Ç–∞, –∏–Ω—Å—É–ª—å—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –°–°–ó ‚Äï —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏.

–í–µ–±–∏–Ω–∞—Ä –ø—Ä–æ–π–¥—ë—Ç **3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 (–ø–æ –ú–æ—Å–∫–≤–µ)**. –ú—ã –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É –∑–∞ 1 –¥–µ–Ω—å –∏ –≤ –¥–µ–Ω—å —ç—Ñ–∏—Ä–∞.

üì© –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É ‚Äî —Å–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è.

–°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ñ–∏—Ä –±—É–¥–µ—Ç –∑–¥–µ—Å—å, –≤ –±–æ—Ç–µ."""
        
        await self.broadcast_to_users(text, self.get_diagnostic_keyboard(), "three_days")
    
    async def send_day_reminder(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞ –¥–µ–Ω—å –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        text = """üîπ ü´Ä –£–∂–µ –∑–∞–≤—Ç—Ä–∞ ‚Äî –≤–µ–±–∏–Ω–∞—Ä, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É –≤–∞—Å –±—É–¥–µ—Ç –Ω–∞ —Ä—É–∫–∞—Ö –º–∞—Ä—à—Ä—É—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–¥—Ü–µ –∑–¥–æ—Ä–æ–≤—ã–º, –∞ –∂–∏–∑–Ω—å –¥–æ–ª–≥–æ–π –∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π ‚Äî –¥–ª—è —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö.

üìÖ **3 –∞–≤–≥—É—Å—Ç–∞, 12:00 –ú–°–ö**

–ñ–¥–µ–º –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∫ —ç–∫—Ä–∞–Ω–∞–º —Å–≤–æ–∏—Ö —Ä–æ–¥–Ω—ã—Ö –∏ –±–ª–∏–∑–∫–∏—Ö ‚ù§Ô∏è

**–ß—Ç–æ –≤–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–µ–±–∏–Ω–∞—Ä–æ–º?**
‚úîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∞–Ω–∞–ª–∏–∑—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚úîÔ∏è –ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å–ø–µ–ª–∏ ‚Äï —Ç–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª—É—à–∞—Ç—å –∏ –∑–∞–±—ã—Ç—å

**–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ:**
‚úîÔ∏è–∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—É—é –ª–µ–Ω—Ç—É
‚úîÔ∏è—Ç–æ–Ω–æ–º–µ—Ç—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚úîÔ∏è—Ä—É—á–∫—É –∏ –±–ª–æ–∫–Ω–æ—Ç –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏
‚úîÔ∏è—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ (–µ—Å–ª–∏ —Å–¥–∞–≤–∞–ª–∏)
‚úîÔ∏è–æ—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±–æ—Ç–∞
‚úîÔ∏è—Å—Ç–∞–∫–∞–Ω —Å –ª—é–±–∏–º—ã–º –Ω–∞–ø–∏—Ç–∫–æ–º üòâ

‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É. –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –ü—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="start_diagnostic")],
            [InlineKeyboardButton(text="‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞", callback_data="already_completed")]
        ])
        
        await self.broadcast_to_users(text, keyboard, "one_day")
    
    async def send_three_hours_reminder(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞ 3 —á–∞—Å–∞ –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        text = """üî∏ üì≤ –í–µ–±–∏–Ω–∞—Ä —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞

–°–µ–≥–æ–¥–Ω—è ‚Äî –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –∏–Ω—Ñ–∞—Ä–∫—Ç–∞ –∏ –∏–Ω—Å—É–ª—å—Ç–∞, —á—Ç–æ–±—ã –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–ª–æ–¥–æ—Å—Ç–∏ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤.

üïõ **–í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–Ω—ë—Ç—Å—è –≤ 12:00 –ø–æ –ú–°–ö.**

–ó–∞ 2,5 —á–∞—Å–∞ –Ω–∞—É—á–∏–º—Å—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∏—Å–∫–∏, –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ä–∞–∑–±–æ—Ä–µ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –≤—ã—Å—Ç—Ä–æ–∏–º –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –Ω–∞—É—á–∏–º—Å—è –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–∏—Å–∫–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ñ–∞—Ä–∫—Ç–æ–≤ –∏ –∏–Ω—Å—É–ª—å—Ç–æ–≤, —Ä–∞–∑–±–µ—Ä—ë–º –∫–ª—é—á–µ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∏ –≤—ã—Å—Ç—Ä–æ–∏–º –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Å–µ—Ä–¥—Ü–∞ –∑–¥–æ—Ä–æ–≤—ã–º.

**–ß—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –∏–∑ –≤–µ–±–∏–Ω–∞—Ä–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ:**
‚úîÔ∏è–∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—É—é –ª–µ–Ω—Ç—É
‚úîÔ∏è—Ç–æ–Ω–æ–º–µ—Ç—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚úîÔ∏è—Ä—É—á–∫—É –∏ –±–ª–æ–∫–Ω–æ—Ç –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏
‚úîÔ∏è—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ (–µ—Å–ª–∏ —Å–¥–∞–≤–∞–ª–∏)
‚úîÔ∏è–æ—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±–æ—Ç–∞
‚úîÔ∏è—Å—Ç–∞–∫–∞–Ω —Å –ª—é–±–∏–º—ã–º –Ω–∞–ø–∏—Ç–∫–æ–º üòâ"""
        
        await self.broadcast_to_users(text, target_audience="all", broadcast_type="three_hours")
    
    async def send_two_hours_reminder(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        text = """üî∏ üì≤ 2 —á–∞—Å–∞ –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞ ¬´–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª

‚úÖ **–ì–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:** –ø–æ–ª—É—á–∏—Ç–µ —á—ë—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–æ–≤, –Ω—É–∂–Ω—ã—Ö –∏–º–µ–Ω–Ω–æ –≤–∞–º

‚úÖ **–ü–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π:** —Å–¥–∞–≤ –º–∏–Ω–∏–º—É–º –∞–Ω–∞–ª–∏–∑–æ–≤, –æ—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ä–∏—Å–∫–∏ (—è–≤–Ω—ã–µ –∏ —Å–∫—Ä—ã—Ç—ã–µ) –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –≤—Ä–∞—á–µ–π –º–∞—Ä—à—Ä—É—Ç–Ω—É—é –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É

‚úÖ **–ö–∞–∫ –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –ª–∏—à–Ω–µ–≥–æ:** —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –±–µ–∑ –Ω–µ–Ω—É–∂–Ω—ã—Ö –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤ –ø–æ –≤—Ä–∞—á–∞–º

**–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ ‚ÄºÔ∏è**"""
        
        await self.broadcast_to_users(text, target_audience="all", broadcast_type="two_hours")
    
    async def send_hour_reminder(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞ —á–∞—Å –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        text = """üî∏ **–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä ¬´–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª**

üïõ **–ù–∞—á–∞–ª–æ ‚Äî —á–µ—Ä–µ–∑ —á–∞—Å, –≤ 12:00 –ú–°–ö**

üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ñ–∏—Ä:** https://your-webinar-link.com"""
        
        await self.broadcast_to_users(text, target_audience="all", broadcast_type="one_hour")
    
    async def send_fifteen_minutes_reminder(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        text = """üî∏ **–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç ‚Äî —Å—Ç–∞—Ä—Ç üöÄ**

–í–µ–±–∏–Ω–∞—Ä ¬´–£–º–Ω—ã–π –ö–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ —Ä–æ–≤–Ω–æ –≤ **12:00 –ú–°–ö**

üîó **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:** https://your-webinar-link.com"""
        
        await self.broadcast_to_users(text, target_audience="all", broadcast_type="fifteen_minutes")
    
    async def send_start_reminder(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ –≤ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        text = """üî∏ **–ú—ã –Ω–∞—á–∞–ª–∏!**

–í–µ–±–∏–Ω–∞—Ä –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ. –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å —Å–µ–π—á–∞—Å ‚Äî –∏–¥—ë—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º:

üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ñ–∏—Ä:** https://your-webinar-link.com

**–°–µ–≥–æ–¥–Ω—è –≤—ã:**
‚úîÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç–µ —Ä–∏—Å–∫–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ñ–∞—Ä–∫—Ç–æ–≤ –∏ –∏–Ω—Å—É–ª—å—Ç–æ–≤
‚úîÔ∏è –ü–æ–π–º—ë—Ç–µ, –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –∏ –∫–æ–≥–¥–∞ —Å–¥–∞–≤–∞—Ç—å
‚úîÔ∏è –ü–æ–ª—É—á–∏—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–¥—Ü–∞"""
        
        await self.broadcast_to_users(text, target_audience="all", broadcast_type="webinar_start")
    
    async def broadcast_to_users(self, text: str, keyboard: Optional[InlineKeyboardMarkup] = None, 
                                target_audience: str = "all", broadcast_type: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if target_audience == "completed":
                users = await get_completed_users()
            elif target_audience == "uncompleted":
                users = await get_uncompleted_users()
            else:
                users = await get_all_users()
            
            total_users = len(users)
            sent_count = 0
            error_count = 0
            
            logger.info(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–∏–ø: {broadcast_type})")
            
            for user in users:
                try:
                    if keyboard:
                        await self.bot.send_message(
                            user.telegram_id, 
                            text, 
                            parse_mode="Markdown",
                            reply_markup=keyboard
                        )
                    else:
                        await self.bot.send_message(
                            user.telegram_id, 
                            text, 
                            parse_mode="Markdown"
                        )
                    sent_count += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                    await asyncio.sleep(0.05)  # 50ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    
                except Exception as e:
                    error_count += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            await log_broadcast(
                broadcast_type=broadcast_type,
                message_text=text,
                target_audience=target_audience,
                total_users=total_users,
                sent_count=sent_count,
                error_count=error_count
            )
            
            logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_users}, –æ—à–∏–±–æ–∫: {error_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏

async def send_custom_broadcast(bot: Bot, message_text: str, user_filter: str = "all"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
    try:
        if user_filter == "completed":
            users = await get_completed_users()
        elif user_filter == "uncompleted":
            users = await get_uncompleted_users()
        else:
            users = await get_all_users()
        
        total_users = len(users)
        sent_count = 0
        error_count = 0
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        for user in users:
            try:
                await bot.send_message(
                    user.telegram_id,
                    message_text,
                    parse_mode="Markdown"
                )
                sent_count += 1
                await asyncio.sleep(0.05)
                
            except Exception as e:
                error_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await log_broadcast(
            broadcast_type="custom_admin",
            message_text=message_text,
            target_audience=user_filter,
            total_users=total_users,
            sent_count=sent_count,
            error_count=error_count
        )
        
        return {"sent": sent_count, "errors": error_count, "total": total_users}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        return {"sent": 0, "errors": 1, "total": 0}

async def test_broadcast_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        all_users = await get_all_users()
        completed_users = await get_completed_users()
        uncompleted_users = await get_uncompleted_users()
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        logger.info(f"   –í—Å–µ–≥–æ: {len(all_users)}")
        logger.info(f"   –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {len(completed_users)}")
        logger.info(f"   –ù–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏: {len(uncompleted_users)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False