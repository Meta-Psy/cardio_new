import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import pytz

from database import admin_export_data, admin_get_stats, clean_old_data
from dotenv import load_dotenv
load_dotenv()
admin_router = Router()

class AdminStates(StatesGroup):
    waiting_password = State()

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "")

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="admin_clean")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh_stats")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="admin_logout")]
    ])
    return keyboard

@admin_router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext, is_admin: bool = False):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    admin_session = await state.get_data()
    if admin_session.get('admin_authenticated'):
        await show_admin_panel(message)
    else:
        await request_admin_password(message, state)

async def request_admin_password(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ"""
    text = """üîê <b>–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏</b>

–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"""
    
    await message.answer(text, parse_mode="HTML")
    await state.set_state(AdminStates.waiting_password)

async def request_admin_password(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ"""
    text = """üîê <b>–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏</b>

–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"""
    
    await message.answer(text, parse_mode="HTML")
    await state.set_state(AdminStates.waiting_password)

@admin_router.message(AdminStates.waiting_password)
async def handle_admin_password(message: Message, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    password = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass
    
    if str(password) == str(ADMIN_PASSWORD):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await state.update_data(admin_authenticated=True)
        
        text = "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."
        sent_message = await message.answer(text)
        
        # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        import asyncio
        await asyncio.sleep(2)
        await show_admin_panel(sent_message)
    else:
        
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def check_admin_auth(callback: CallbackQuery, state: FSMContext, is_admin: bool) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    admin_session = await state.get_data()
    if not admin_session.get('admin_authenticated'):
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å", show_alert=True)
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await request_admin_password(callback.message, state)
        return False

    return True
    
async def show_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    text = """üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üì• <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b> - –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Excel
üóë <b>–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ</b> - —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b> - –ø–µ—Ä–µ—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üö™ <b>–í—ã–π—Ç–∏</b> - –≤—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    
    keyboard = get_admin_keyboard()
    try:
        await message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@admin_router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    try:
        stats = await admin_get_stats()
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {stats['completed_registration']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {stats['completed_surveys']}
‚Ä¢ –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã: {stats['completed_tests']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {stats['completed_diagnostic']}

üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['completed_registration']/max(stats['total_users'], 1)*100:.1f}%
‚Ä¢ –û–ø—Ä–æ—Å: {stats['completed_surveys']/max(stats['total_users'], 1)*100:.1f}%
‚Ä¢ –¢–µ—Å—Ç—ã: {stats['completed_tests']/max(stats['total_users'], 1)*100:.1f}%
‚Ä¢ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {stats['completed_diagnostic']/max(stats['total_users'], 1)*100:.1f}%"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@admin_router.callback_query(F.data == "admin_detailed_stats")
async def show_detailed_stats(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    try:
        from database import admin_get_detailed_stats
        stats = await admin_get_detailed_stats()
        
        basic = stats['basic']
        risk_dist = stats.get('risk_distribution', {})
        test_stats = stats.get('test_results', {})
        
        text = f"""üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {basic['total_users']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {basic['completed_registration']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {basic['completed_surveys']}
‚Ä¢ –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã: {basic['completed_tests']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {basic['completed_diagnostic']}

üéØ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤:</b>"""
        
        for risk_level, count in risk_dist.items():
            if risk_level and count > 0:
                percentage = (count / max(basic['completed_tests'], 1) * 100)
                text += f"\n‚Ä¢ {risk_level}: {count} ({percentage:.1f}%)"
        
        text += f"""\n\n‚ö†Ô∏è <b>–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç—Ä–µ–≤–æ–≥–∞: {test_stats.get('hads_high_anxiety', 0)}
‚Ä¢ –í—ã—Å–æ–∫–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è: {test_stats.get('hads_high_depression', 0)}
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è+ –¥–µ–ø—Ä–µ—Å—Å–∏—è: {test_stats.get('burns_moderate_plus', 0)}
‚Ä¢ –ö–ª–∏–Ω–∏—á–µ—Å–∫–∞—è –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞: {test_stats.get('isi_clinical_insomnia', 0)}
‚Ä¢ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –∞–ø–Ω–æ—ç: {test_stats.get('stop_bang_high_risk', 0)}
‚Ä¢ –ß—Ä–µ–∑–º–µ—Ä–Ω–∞—è —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å: {test_stats.get('ess_excessive', 0)}
‚Ä¢ –ù–∏–∫–æ—Ç–∏–Ω–æ–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {test_stats.get('fagerstrom_dependent', 0)}
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–ª–∫–æ–≥–æ–ª–µ–º: {test_stats.get('audit_risky', 0)}"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@admin_router.callback_query(F.data == "admin_refresh_stats")
async def refresh_stats(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä—É—á–Ω—É—é"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await callback.message.edit_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        from database import update_daily_stats
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        def _update_stats():
            return update_daily_stats()
        
        import asyncio
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, _update_stats)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await admin_get_stats()
        
        text = f"""‚úÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>

üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {stats['completed_registration']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {stats['completed_surveys']}
‚Ä¢ –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã: {stats['completed_tests']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {stats['completed_diagnostic']}

üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@admin_router.callback_query(F.data == "admin_export")
async def export_data(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await callback.message.edit_text("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    try:
        filename = await admin_export_data()
        
        if os.path.exists(filename):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            document = FSInputFile(filename)
            await callback.message.answer_document(
                document, 
                caption="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –≥–æ—Ç–æ–≤"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            await show_admin_panel(callback.message)
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

@admin_router.callback_query(F.data == "admin_clean")
async def clean_data_menu(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    text = """üóë <b>–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.

–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:
‚Ä¢ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–æ–∫  
‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø—Ä–æ—Å–æ–≤ –∏ —Ç–µ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏!</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë 30 –¥–Ω–µ–π", callback_data="clean_30")],
        [InlineKeyboardButton(text="üóë 60 –¥–Ω–µ–π", callback_data="clean_60")],
        [InlineKeyboardButton(text="üóë 90 –¥–Ω–µ–π", callback_data="clean_90")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("clean_"))
async def clean_old_data_action(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    days = int(callback.data.split("_")[1])
    
    await callback.message.edit_text(f"‚è≥ –£–¥–∞–ª—è—é –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    
    try:
        def _clean():
            return clean_old_data(days)
        
        import asyncio
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, _clean)
        
        text = f"""‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

–£–¥–∞–ª–µ–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π:
‚Ä¢ –õ–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {result.get('deleted_activity_logs', 0)}
‚Ä¢ –õ–æ–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫: {result.get('deleted_broadcast_logs', 0)}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result.get('deleted_system_stats', 0)}

üíæ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

@admin_router.callback_query(F.data == "admin_back")
async def back_to_admin(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await show_admin_panel(callback.message)

@admin_router.callback_query(F.data == "admin_logout")
async def admin_logout(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await state.update_data(admin_authenticated=False)
    await state.clear()
    
    text = """üëã <b>–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>

–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin"""
    
    await callback.message.edit_text(text, parse_mode="HTML")

async def check_admin_auth(callback: CallbackQuery, state: FSMContext, is_admin: bool) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return False

    return True

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
@admin_router.message(Command("stats"))
async def quick_stats(message: Message, state: FSMContext, is_admin: bool = False):
    """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É admin_authenticated - –ø–æ–ª–∞–≥–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ is_admin
    try:
        stats = await admin_get_stats()
        
        text = f"""üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {stats['completed_registration']}
üìù –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {stats['completed_surveys']}
üß™ –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã: {stats['completed_tests']}
üéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {stats['completed_diagnostic']}

üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {stats['completed_registration']/max(stats['total_users'], 1)*100:.1f}%
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –æ–ø—Ä–æ—Å: {stats['completed_surveys']/max(stats['total_users'], 1)*100:.1f}%
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ç–µ—Å—Ç—ã: {stats['completed_tests']/max(stats['total_users'], 1)*100:.1f}%
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {stats['completed_diagnostic']/max(stats['total_users'], 1)*100:.1f}%"""
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@admin_router.message(Command("export"))
async def quick_export(message: Message, state: FSMContext, is_admin: bool = False):
    """–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É admin_authenticated
    await message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç...")
    
    try:
        filename = await admin_export_data()
        
        if os.path.exists(filename):
            document = FSInputFile(filename)
            await message.answer_document(
                document, 
                caption="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤"
            )
            os.remove(filename)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
# –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.message(Command("adminhelp"))
async def admin_help(message: Message, state: FSMContext, is_admin: bool = False):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    text = """üîß <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å)
/stats - –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
/export - –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
/adminhelp - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å
‚Ä¢ –ü–∞—Ä–æ–ª—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ADMIN_PASSWORD
‚Ä¢ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

<b>üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç:</b>
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel
‚Ä¢ –û—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä—É—á–Ω—É—é
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞

<b>üì• –≠–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤  
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å—Å—ã–ª–æ–∫

<b>üóë –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –£–¥–∞–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏
‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏
‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

–í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    
    await message.answer(text, parse_mode="HTML")
    
@admin_router.callback_query(F.data == "admin_test_broadcast")
async def test_broadcast_system(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await callback.message.edit_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–æ–∫...")
    
    try:
        from broadcast import BroadcastScheduler
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = BroadcastScheduler(callback.bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        webinar_time = scheduler.webinar_date
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞
        time_until_webinar = webinar_time - current_time
        days_until = time_until_webinar.days
        hours_until = time_until_webinar.seconds // 3600
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from database import get_all_users, get_completed_users
        all_users = await get_all_users()
        completed_users = await get_completed_users()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        text = f"""üß™ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –†–ê–°–°–´–õ–û–ö</b>

‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:</b>
‚Ä¢ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {current_time.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –í—Ä–µ–º—è –≤–µ–±–∏–Ω–∞—Ä–∞: {webinar_time.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –î–æ –≤–µ–±–∏–Ω–∞—Ä–∞: {days_until} –¥–Ω–µ–π, {hours_until} —á–∞—Å–æ–≤

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {len(completed_users)}
‚Ä¢ –ü–æ–ª—É—á–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {len(all_users)}

üïê <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫
        schedule = {
            '–ó–∞ –Ω–µ–¥–µ–ª—é': webinar_time - timedelta(days=7),
            '–ó–∞ 3 –¥–Ω—è': webinar_time - timedelta(days=3), 
            '–ó–∞ 1 –¥–µ–Ω—å': webinar_time - timedelta(days=1),
            '–ó–∞ 3 —á–∞—Å–∞': webinar_time - timedelta(hours=3),
            '–ó–∞ 2 —á–∞—Å–∞': webinar_time - timedelta(hours=2),
            '–ó–∞ 1 —á–∞—Å': webinar_time - timedelta(hours=1),
            '–ó–∞ 15 –º–∏–Ω—É—Ç': webinar_time - timedelta(minutes=15),
            '–ù–∞—á–∞–ª–æ –≤–µ–±–∏–Ω–∞—Ä–∞': webinar_time
        }
        
        for name, send_time in schedule.items():
            time_diff = send_time - current_time
            if time_diff.total_seconds() > 0:
                status = "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                days = time_diff.days
                hours = time_diff.seconds // 3600
                time_left = f"—á–µ—Ä–µ–∑ {days}–¥ {hours}—á"
            else:
                status = "‚úÖ –ü—Ä–æ—à–ª–æ"
                time_left = "—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            
            text += f"\n‚Ä¢ {name}: {send_time.strftime('%d.%m %H:%M')} - {status} ({time_left})"
        
        text += f"""

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'–ê–∫—Ç–∏–≤–µ–Ω' if scheduler.running else '–ù–µ –∑–∞–ø—É—â–µ–Ω'}
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ: 5 –º–∏–Ω—É—Ç
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {len(scheduler.sent_broadcasts)}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: 50ms
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Moscow

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_send_test")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_test_broadcast")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

@admin_router.callback_query(F.data == "admin_send_test")
async def send_test_broadcast(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    try:
        from broadcast import send_custom_broadcast
        
        test_message = """üß™ <b>–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.

‚úÖ –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

üóì –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –≤–µ–±–∏–Ω–∞—Ä "–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø" —Å–æ—Å—Ç–æ–∏—Ç—Å—è 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö."""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Ç–µ—Å—Ç–∞
        result = await send_test_to_admins(callback.bot, test_message)
        
        text = f"""‚úÖ <b>–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['sent']}
‚Ä¢ –û—à–∏–±–æ–∫: {result['errors']}
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram!"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data="admin_test_broadcast")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def send_test_to_admins(bot, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º"""
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–æ–≤
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    admin_ids = []
    if admin_ids_str:
        admin_ids = [int(x.strip()) for x in admin_ids_str.split(",") if x.strip()]
    
    sent_count = 0
    error_count = 0
    
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, message_text, parse_mode="HTML")
            sent_count += 1
        except Exception as e:
            error_count += 1    
    return {"sent": sent_count, "errors": error_count}

# –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É –≤ get_admin_keyboard():
def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="admin_clean")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh_stats")],
        [InlineKeyboardButton(text="üì° –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_test_broadcast")],  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="admin_logout")]
    ])
    return keyboard
