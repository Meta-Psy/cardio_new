import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton,  BotCommand, BotCommandScopeDefault
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards import *
from database import *
from surveys import *


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

# ============================================================================
# MIDDLEWARE –î–õ–Ø –ó–ê–©–ò–¢–´ –û–¢ –ó–ê–¶–ò–ö–õ–ò–í–ê–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ô
# ============================================================================

class StateProtectionMiddleware:
    """Middleware –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.processing_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.user_last_action = {}     # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        self.action_timeouts = {}      # –¢–∞–π–º-–∞—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def __call__(self, handler, event, data):
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not hasattr(event, 'from_user') or not event.from_user:
            return await handler(event, data)
        
        try:
            user_id = event.from_user.id
            current_time = asyncio.get_event_loop().time()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫)
            try:
                action_id = self._get_action_id(event)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è action_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                action_id = "unknown_action"
            
            # –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ë–ï–ó –∑–∞—â–∏—Ç—ã
            if self._is_admin_action(event):
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action_id}")
                return await handler(event, data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥)
            if user_id in self.user_last_action:
                last_action, last_time = self.user_last_action[user_id]
                if last_action == action_id and (current_time - last_time) < 2.0:
                    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    if hasattr(event, 'answer'):
                        try:
                            await event.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", show_alert=False)
                        except:
                            pass
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.processing_users:
                if hasattr(event, 'answer'):
                    try:
                        await event.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å...", show_alert=True)
                    except:
                        pass
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
            if user_id in self.action_timeouts:
                if current_time < self.action_timeouts[user_id]:
                    if hasattr(event, 'answer'):
                        try:
                            await event.answer("üîÑ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
                        except:
                            pass
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
            self.processing_users.add(user_id)
            self.user_last_action[user_id] = (action_id, current_time)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (0.5 —Å–µ–∫—É–Ω–¥—ã)
            self.action_timeouts[user_id] = current_time + 0.5
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                return await handler(event, data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                try:
                    if hasattr(event, 'message') and hasattr(event.message, 'answer'):
                        await event.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                    elif hasattr(event, 'answer'):
                        await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                    elif hasattr(event, 'answer_text'):
                        await event.answer_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                except Exception as answer_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {answer_error}")
            finally:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.processing_users.discard(user_id)
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)
                try:
                    cutoff_time = current_time - 600
                    self.user_last_action = {
                        uid: (action, time) for uid, (action, time) in self.user_last_action.items()
                        if time > cutoff_time
                    }
                    self.action_timeouts = {
                        uid: timeout for uid, timeout in self.action_timeouts.items()
                        if timeout > current_time
                    }
                except Exception as cleanup_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ middleware: {cleanup_error}")
        
        except Exception as middleware_error:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ StateProtectionMiddleware: {middleware_error}")
            # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ middleware - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            return await handler(event, data)
        
        return await handler(event, data)
    
    def _is_admin_action(self, event):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º"""
        
        # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
        admin_commands = ['/admin', '/stats', '/export', '/broadcast', '/adminhelp']
        admin_callbacks = ['admin_', 'export_', 'stats_', 'broadcast_', 'clean_']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if hasattr(event, 'text') and event.text:
            text = event.text.strip().lower()
            for cmd in admin_commands:
                if text.startswith(cmd):
                    return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback'–∏
        if hasattr(event, 'data') and event.data:
            for callback in admin_callbacks:
                if event.data.startswith(callback):
                    return True
        
        return False
    
    def _get_action_id(self, event):
        """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è"""
        if hasattr(event, 'data'):  # CallbackQuery
            return f"callback:{event.data}"
        elif hasattr(event, 'text') and event.text:  # Message with text
            return f"message:{event.text[:50]}"  # –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
        elif hasattr(event, 'contact') and event.contact:  # Contact
            return "contact:shared"
        elif hasattr(event, 'photo') and event.photo:  # Photo
            return "media:photo"
        elif hasattr(event, 'document') and event.document:  # Document
            return "media:document"
        elif hasattr(event, 'sticker') and event.sticker:  # Sticker
            return "media:sticker"
        elif hasattr(event, 'voice') and event.voice:  # Voice
            return "media:voice"
        elif hasattr(event, 'video') and event.video:  # Video
            return "media:video"
        elif hasattr(event, 'audio') and event.audio:  # Audio
            return "media:audio"
        elif hasattr(event, 'location') and event.location:  # Location
            return "location:shared"
        elif hasattr(event, 'content_type'):  # Any message with content_type
            return f"message:{event.content_type}"
        else:
            return "unknown"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä middleware
state_protection = StateProtectionMiddleware()

# ============================================================================
# –°–û–°–¢–û–Ø–ù–ò–Ø FSM
# ============================================================================

class UserStates(StatesGroup):
    waiting_start = State()
    waiting_name = State()
    waiting_email = State()
    waiting_phone = State()
    
    # –û–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    survey_age = State()
    survey_gender = State()
    survey_location = State()
    survey_education = State()
    survey_family = State()
    survey_children = State()
    survey_income = State()
    survey_health = State()
    survey_death_cause = State()
    survey_heart_disease = State()
    survey_cv_risk = State()
    survey_cv_knowledge = State()
    survey_heart_danger = State()
    survey_health_importance = State()
    survey_checkup_history = State()
    survey_checkup_content = State()
    survey_prevention_barriers = State()
    survey_health_advice = State()
    
    # –¢–µ—Å—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    test_selection = State()
    hads_test = State()
    burns_test = State()
    isi_test = State()
    stop_bang_test = State()
    ess_test = State()
    fagerstrom_test = State()
    audit_test = State()

COMMANDS = [
    BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"),
    BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
    BotCommand(command="status", description="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"),
    BotCommand(command="restart", description="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
]

async def setup_bot_commands(bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    await bot.set_my_commands(COMMANDS, BotCommandScopeDefault())

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–©–ò–¢–´ –°–û–°–¢–û–Ø–ù–ò–ô
# ============================================================================

async def safe_edit_message(message, text, parse_mode="HTML", reply_markup=None, max_retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            await message.edit_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
            return True
        except Exception as e:
            if "message is not modified" in str(e):
                return True  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ç–∞–∫–æ–µ
            if attempt == max_retries - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await message.answer(text, parse_mode=parse_mode, reply_markup=reply_markup)
                    return True
                except:
                    return False
            await asyncio.sleep(0.5)
    return False

async def safe_answer_callback(callback, text="", show_alert=False, max_retries=2):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback"""
    for attempt in range(max_retries):
        try:
            await callback.answer(text, show_alert=show_alert)
            return True
        except Exception as e:
            if "query is too old" in str(e) or "QUERY_ID_INVALID" in str(e):
                return True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ callback'–∏
            if attempt == max_retries - 1:
                return False
            await asyncio.sleep(0.3)
    return False

async def log_user_interaction(user_id: int, action: str, details: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await log_user_activity(
            telegram_id=user_id,
            action=action,
            details={"interaction": details} if details else {},
            step=action
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# ============================================================================
# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê (–° –ó–ê–©–ò–¢–û–ô)
# ============================================================================

@router.message(Command("help"))
async def help_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    await log_user_interaction(message.from_user.id, "help_requested")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_completed = check_user_completed(message.from_user.id)
    current_state = await state.get_state()
    
    if user_completed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        text = """‚ùì <b>–ü–û–ú–û–©–¨ - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.

üóì <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –í–µ–±–∏–Ω–∞—Ä "–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø": 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö
‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ñ–∏—Ä –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/restart - –ü—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ

üí° <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å."""

    elif current_state and ("survey" in current_state or "test" in current_state):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        text = """‚ùì <b>–ü–û–ú–û–©–¨ - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</b>

üìù –í—ã —Å–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑—ã –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞!

üîÑ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –≤–∞–∂–µ–Ω –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 10-15 –º–∏–Ω—É—Ç

‚ö†Ô∏è <b>–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:</b>
/restart - –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ
/status - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

üí° <b>–ù–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å?</b>
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."""

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –∏–ª–∏ –ø—Ä–µ—Ä–≤–∞–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        text = """‚ùì <b>–ü–û–ú–û–©–¨ - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

ü´Ä –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–µ–±–∏–Ω–∞—Ä—É <b>"–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø"</b> —Å –≤—Ä–∞—á–∞–º–∏-–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞–º–∏.

üéØ <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –ü–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –û—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ /start
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω)
3. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å (18 –≤–æ–ø—Ä–æ—Å–æ–≤, 5-7 –º–∏–Ω—É—Ç)
4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã (7 —Ç–µ—Å—Ç–æ–≤, 10-15 –º–∏–Ω—É—Ç)
5. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
/restart - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"""

    await message.answer(text, parse_mode="HTML")

@router.message(Command("status"))
async def status_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    await log_user_interaction(message.from_user.id, "status_requested")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = get_user_data(message.from_user.id)
        user = data.get('user')
        survey = data.get('survey') 
        tests = data.get('tests')
        
        if not user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            text = """üìä <b>–í–ê–® –°–¢–ê–¢–£–°</b>

‚ùå –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É

üöÄ <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∏ —Ç–µ—Å—Ç—ã

üí° –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 15-20 –º–∏–Ω—É—Ç, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞!"""
            
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            text = f"""üìä <b>–í–ê–® –°–¢–ê–¢–£–° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}

<b>–ü–†–û–ì–†–ï–°–°:</b>"""
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            if user.registration_completed:
                text += "\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            else:
                text += "\n‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            
            # –û–ø—Ä–æ—Å
            if user.survey_completed:
                text += "\n‚úÖ –û–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ–Ω (18/18 –≤–æ–ø—Ä–æ—Å–æ–≤)"
                if survey and survey.age:
                    text += f"\n   ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {survey.age} –ª–µ—Ç, –ø–æ–ª: {survey.gender or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            else:
                text += "\n‚ùå –û–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ–π–¥–µ–Ω (0/18 –≤–æ–ø—Ä–æ—Å–æ–≤)"
            
            # –¢–µ—Å—Ç—ã
            if user.tests_completed:
                text += "\n‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (7/7 —Ç–µ—Å—Ç–æ–≤)"
                if tests and tests.overall_cv_risk_level:
                    text += f"\n   ‚Ä¢ –°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ä–∏—Å–∫: {tests.overall_cv_risk_level}"
            else:
                text += "\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã (0/7 —Ç–µ—Å—Ç–æ–≤)"
            
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if user.completed_diagnostic:
                text += f"""

üéâ <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>
‚Ä¢ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {user.last_activity.strftime('%d.%m.%Y') if user.last_activity else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –í—ã –≥–æ—Ç–æ–≤—ã –∫ –≤–µ–±–∏–Ω–∞—Ä—É!

üóì <b>–í–µ–±–∏–Ω–∞—Ä:</b> 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö"""
            else:
                text += f"""

‚è≥ <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê</b>

üîÑ <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b>"""
                if not user.registration_completed:
                    text += "\n‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/start)"
                elif not user.survey_completed:
                    text += "\n‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å (/start)"
                elif not user.tests_completed:
                    text += "\n‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã (/start)"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ status_command –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

@router.message(Command("restart"))
async def restart_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    await log_user_interaction(message.from_user.id, "restart_requested")
    
    text = """üîÑ <b>–ü–ï–†–ï–ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò</b>

‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ?

‚ùó <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –í—Å–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
‚Ä¢ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
‚Ä¢ –≠—Ç–æ –∑–∞–π–º–µ—Ç 15-20 –º–∏–Ω—É—Ç

‚úÖ –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="confirm_restart")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_restart")]
    ])
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# ============================================================================
# –ó–ê–©–ò–©–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö /start
# ============================================================================

@router.message(CommandStart())
async def start_command_protected(message: Message, state: FSMContext):
    """–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await log_user_interaction(message.from_user.id, "start_command")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    user_completed = check_user_completed(message.from_user.id)
    
    if user_completed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        await show_completed_user_info(message, state)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if current_state:
        await handle_start_during_process(message, state, current_state)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_start_message(message, state)

async def handle_start_during_process(message: Message, state: FSMContext, current_state: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if "waiting_name" in current_state or "waiting_email" in current_state or "waiting_phone" in current_state:
        stage = "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        current_step = "–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    elif "survey" in current_state:
        stage = "–æ–ø—Ä–æ—Å–∞"
        current_step = "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ"
    elif "test" in current_state:
        stage = "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        current_step = "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"
    else:
        stage = "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
        current_step = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø"
    
    text = f"""üîÑ <b>–í–´ –£–ñ–ï –í –ü–†–û–¶–ï–°–°–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò</b>

‚è≥ –°–µ–π—á–∞—Å –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —ç—Ç–∞–ø: <b>{stage}</b>
üìç –¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step}

‚ùì <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</b>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞", callback_data="continue_current")],
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å)", callback_data="restart_from_beginning")],
        [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="show_status")]
    ])
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

async def show_completed_user_info(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    try:
        data = get_user_data(message.from_user.id)
        user = data.get('user')
        tests = data.get('tests')
        
        name = user.name if user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        risk_level = tests.overall_cv_risk_level if tests else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        text = f"""üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!</b>

‚úÖ –í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É!
üéØ –í–∞—à —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ä–∏—Å–∫: <b>{risk_level}</b>

üóì <b>–í–µ–±–∏–Ω–∞—Ä "–£–º–Ω—ã–π –ö–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø":</b>
üìÖ 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö
üìç –°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ñ–∏—Ä –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞

üí° <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚Ä¢ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–ª–∏–∑–∫–∏—Ö –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É

–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ! üí™"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_full_results")],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ", callback_data="restart_from_beginning")],
            [InlineKeyboardButton(text="üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –≤–µ–±–∏–Ω–∞—Ä—É", callback_data="show_materials")]
        ])
        
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_completed_user_info –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")

async def show_start_message(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    text = """ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –î–∏–∞–Ω—ã –ù–æ–≤–∏–∫–æ–≤–æ–π –∏ –ï–ª–µ–Ω—ã –£–¥–∞—á–∫–∏–Ω–æ–π, –∞–≤—Ç–æ—Ä–æ–≤ –≤–µ–±–∏–Ω–∞—Ä–∞ <b>¬´–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª</b>.

‚ù£Ô∏è –ü–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–µ–±–∏–Ω–∞—Ä—É, –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã, —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤, –Ω—É–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.

üëâ –ù–∞–∂–º–∏—Ç–µ <b>¬´–°—Ç–∞—Ä—Ç¬ª</b>, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º–µ–Ω—è –∏ –Ω–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É –≤–µ–±–∏–Ω–∞—Ä—É —ç—Ç–æ–≥–æ –ª–µ—Ç–∞."""
    
    keyboard = get_start_keyboard()
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserStates.waiting_start)

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í –î–õ–Ø –ó–ê–©–ò–¢–´ –°–û–°–¢–û–Ø–ù–ò–ô
# ============================================================================

@router.callback_query(F.data == "continue_current")
async def continue_current_process(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "continue_current")
    
    current_state = await state.get_state()
    
    if "waiting_name" in current_state:
        text = """‚úçÔ∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è.

‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"""
        await safe_edit_message(callback.message, text)
        
    elif "waiting_email" in current_state:
        text = """‚úçÔ∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à e-mail.

‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail"""
        await safe_edit_message(callback.message, text)
        
    elif "waiting_phone" in current_state:
        text = """‚úçÔ∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

3Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"""
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await safe_edit_message(callback.message, text)
        await callback.message.answer("üëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ", reply_markup=keyboard)
        
    elif "survey" in current_state:
        text = """üìù <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å</b>

–í—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."""
        await safe_edit_message(callback.message, text)
        
    elif "test" in current_state:
        text = """üß™ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>

–í—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        await safe_edit_message(callback.message, text)
        
    else:
        await safe_edit_message(callback.message, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å...")

@router.callback_query(F.data == "restart_from_beginning")
async def restart_from_beginning(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "restart_from_beginning")
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    text = """üîÑ <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–ê</b>

–ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞!

ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –î–∏–∞–Ω—ã –ù–æ–≤–∏–∫–æ–≤–æ–π –∏ –ï–ª–µ–Ω—ã –£–¥–∞—á–∫–∏–Ω–æ–π, –∞–≤—Ç–æ—Ä–æ–≤ –≤–µ–±–∏–Ω–∞—Ä–∞ <b>¬´–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª</b>.

üëâ –ù–∞–∂–º–∏—Ç–µ <b>¬´–°—Ç–∞—Ä—Ç¬ª</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –≤–µ–±–∏–Ω–∞—Ä—É."""
    
    keyboard = get_start_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.waiting_start)

@router.callback_query(F.data == "show_status")
async def show_status_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ callback"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "show_status_callback")
    
    try:
        data = get_user_data(callback.from_user.id)
        user = data.get('user')
        
        if not user:
            text = """üìä <b>–í–ê–® –°–¢–ê–¢–£–°</b>

‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞

üöÄ –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        else:
            text = f"""üìä <b>–í–ê–® –°–¢–ê–¢–£–°</b>

üë§ –ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}

<b>–ü–†–û–ì–†–ï–°–°:</b>
{'‚úÖ' if user.registration_completed else '‚ùå'} –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
{'‚úÖ' if user.survey_completed else '‚ùå'} –û–ø—Ä–æ—Å
{'‚úÖ' if user.tests_completed else '‚ùå'} –¢–µ—Å—Ç—ã
{'‚úÖ' if user.completed_diagnostic else '‚ùå'} –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_current")],
            [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_from_beginning")]
        ])
        
        await safe_edit_message(callback.message, text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_status_callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await safe_edit_message(callback.message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

@router.callback_query(F.data == "show_full_results")
async def show_full_results(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "show_full_results")
    
    try:
        summary = await generate_final_results_summary(callback.from_user.id)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
        if len(summary) > 4000:
            summary = summary[:3900] + "\n\n... (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∫—Ä–∞—â–µ–Ω—ã)"
        
        await safe_edit_message(callback.message, summary)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_full_results –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await safe_edit_message(callback.message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

@router.callback_query(F.data == "show_materials")
async def show_materials_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –≤–µ–±–∏–Ω–∞—Ä—É"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "show_materials")
    
    text = """üìã <b>–ú–ê–¢–ï–†–ò–ê–õ–´ –ö –í–ï–ë–ò–ù–ê–†–£</b>

üóì <b>–í–µ–±–∏–Ω–∞—Ä "–£–º–Ω—ã–π –ö–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø":</b>
üìÖ 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö

üìé <b>–í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>
‚Ä¢ –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤—ã—à–µ.

üí° <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–µ–±–∏–Ω–∞—Ä—É:</b>
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚Ä¢ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –±–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_full_results")]
    ])
    
    await safe_edit_message(callback.message, text, reply_markup=keyboard)

@router.callback_query(F.data == "confirm_restart")
async def confirm_restart(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "confirm_restart")
    
    await state.clear()
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
    text = """üîÑ <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–ê</b>

–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.

ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –î–∏–∞–Ω—ã –ù–æ–≤–∏–∫–æ–≤–æ–π –∏ –ï–ª–µ–Ω—ã –£–¥–∞—á–∫–∏–Ω–æ–π, –∞–≤—Ç–æ—Ä–æ–≤ –≤–µ–±–∏–Ω–∞—Ä–∞ <b>¬´–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª</b>.

‚ù£Ô∏è –ü–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–µ–±–∏–Ω–∞—Ä—É, –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã, —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤, –Ω—É–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.

üëâ –ù–∞–∂–º–∏—Ç–µ <b>¬´–°—Ç–∞—Ä—Ç¬ª</b>, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º–µ–Ω—è –∏ –Ω–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É –≤–µ–±–∏–Ω–∞—Ä—É —ç—Ç–æ–≥–æ –ª–µ—Ç–∞."""
    
    keyboard = get_start_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.waiting_start)

@router.callback_query(F.data == "cancel_restart")
async def cancel_restart(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "cancel_restart")
    
    text = """‚úÖ <b>–û–¢–ú–ï–ù–ê –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê</b>

–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å  
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"""
    
    await safe_edit_message(callback.message, text)

# ============================================================================
# –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –° –ó–ê–©–ò–¢–û–ô)
# ============================================================================

@router.callback_query(F.data == "start_bot", StateFilter(UserStates.waiting_start))
async def handle_start_bot(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "start_bot")
    
    text = """üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä <b>¬´–£–º–Ω—ã–π –ö–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø¬ª</b> —Å –≤—Ä–∞—á–∞–º–∏-–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞–º–∏ –î–∏–∞–Ω–æ–π –ù–æ–≤–∏–∫–æ–≤–æ–π –∏ –ï–ª–µ–Ω–æ–π –£–¥–∞—á–∫–∏–Ω–æ–π.

–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ –∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π (–≤ —Ç.—á. –∏–Ω—Ñ–∞—Ä–∫—Ç, –∏–Ω—Å—É–ª—å—Ç, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–¥–µ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å), —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–æ–≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –≥–æ–¥—ã –≤–ø–µ—Ä—ë–¥ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞—Ç—Ä–∞—Ç –∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.

üóì <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ø–æ –ú–°–ö (–∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç)

üìç <b>–ó–¥–µ—Å—å, –≤ –±–æ—Ç–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Äî —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –∏ –µ–≥–æ –∑–∞–ø–∏—Å—å
‚Äî —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
‚Äî —á–µ–∫-–ª–∏—Å—Ç—ã
‚Äî –±–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –≤—Ä–∞—á–µ–π

–ú—ã —É–∂–µ –≤—Å—ë –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ üëå –ù–æ —Å–Ω–∞—á–∞–ª–∞ ‚Äï –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π —à–∞–≥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø—Ä–æ—Å–∏–º –æ—Ç–Ω–µ—Å—Ç–∏—Å—å —Å–µ—Ä—å—ë–∑–Ω–æ: –±–µ–∑ –Ω–µ–≥–æ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞.

–°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É üëá"""
    
    await safe_edit_message(callback.message, text)
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 15 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(15)
    
    await send_contact_request(callback.message, state)

async def send_contact_request(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    text = """‚ÄºÔ∏è <b>–ù–µ–±–æ–ª—å—à–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>

–ß—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å—ë –±–µ–∑ —Å–±–æ–µ–≤:
‚úîÔ∏è —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –∏ –∑–∞–ø–∏—Å—å
‚úîÔ∏è —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –±–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚úîÔ∏è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ

–¥–∞–≤–∞–π—Ç–µ —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è ü§ù

–ú–Ω–µ –≤–∞–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏ ‚Äî —Ç–∞–∫ –æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–ø–ª–µ–µ –∏ —á–µ–ª–æ–≤–µ—á–Ω–µ–µ.

<b>1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è.</b>

‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"""
    
    await message.answer(text, parse_mode="HTML")
    await state.set_state(UserStates.waiting_name)

@router.message(StateFilter(UserStates.waiting_name))
async def handle_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await log_user_interaction(message.from_user.id, "name_entered", message.text)
    
    name = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(name=name)
    
    text = """<b>2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à e-mail.</b>

–ù–∞ –Ω–µ–≥–æ –ø—Ä–∏–¥–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–±–∞–≤–∏–º –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–µ–±–∏–Ω–∞—Ä–∞.

‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail"""
    
    await message.answer(text, parse_mode="HTML")
    await state.set_state(UserStates.waiting_email)

@router.message(StateFilter(UserStates.waiting_email))
async def handle_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await log_user_interaction(message.from_user.id, "email_entered", message.text)
    
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if "@" not in email or "." not in email:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(email=email)
    
    text = """<b>3Ô∏è‚É£ –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>

‚ùó–û–Ω –Ω—É–∂–µ–Ω –Ω–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –∏ —Ä–µ–∫–ª–∞–º—ã, –∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –±–æ—Ç. –¢–∞–∫–∂–µ –æ–Ω –ø–æ–º–æ–∂–µ—Ç, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–µ–±–∏–Ω–∞—Ä—É –∏ –¥—Ä—É–≥–∏–º –≤–∞–∂–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.

–í—Å—ë –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏–∫–∏ –≤—Ä–∞—á–∞. –û–±–µ—â–∞—é ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –∑–≤–æ–Ω–∫–æ–≤.

üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(UserStates.waiting_phone)

@router.message(StateFilter(UserStates.waiting_phone))
async def handle_phone(message: Message, state: FSMContext):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    await log_user_interaction(message.from_user.id, "phone_processing")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç
    if message.contact:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        phone = message.contact.phone_number
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        if message.contact.user_id != message.from_user.id:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            return
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await message.answer(
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=phone)
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    data = await state.get_data()
    
    logger.info(f"=== –ù–ê–ß–ê–õ–û –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {message.from_user.id} ===")
    logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: name={data.get('name')}, email={data.get('email')}, phone={phone}")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_result = await save_user_data(
            telegram_id=message.from_user.id,
            name=data.get('name'),
            email=data.get('email'),
            phone=phone
        )
        
        logger.info(f"‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–•–†–ê–ù–ï–ù –£–°–ü–ï–®–ù–û: {save_result}")
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        verification_data = get_user_data(message.from_user.id)
        if verification_data and verification_data.get('user'):
            logger.info(f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {verification_data['user'].id}")
            logger.info(f"Telegram ID: {verification_data['user'].telegram_id}")
            logger.info(f"–ò–º—è: {verification_data['user'].name}")
            logger.info(f"Email: {verification_data['user'].email}")
            logger.info(f"–¢–µ–ª–µ—Ñ–æ–Ω: {verification_data['user'].phone}")
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {verification_data['user'].registration_completed}")
        else:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        await log_user_interaction(message.from_user.id, "registration_completed")
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /restart")
        return
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    text1 = """‚úÖ –°–ø–∞—Å–∏–±–æ! –í—Å—ë –≥–æ—Ç–æ–≤–æ.

–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –ø—Ä–∏—à–ª–µ–º –±–æ–Ω—É—Å—ã –∏ —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.

üìã –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø—Ä–∏—à–ª—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ—Å—å–±–∞ ‚Äî –ø—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø—Ä–æ—Å. –≠—Ç–æ –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –Ω–∞—à–µ–π —Å –≤–∞–º–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.

–í–µ–¥—å –º—ã —Å –≤–∞–º–∏ ‚Äî –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ü¶∏‚Äç‚ôÇÔ∏è"""
    
    text2 = """–í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∫–∞–∫ –∏–∑–≤–ª–µ—á—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –∏–∑ –≤–µ–±–∏–Ω–∞—Ä–∞.

–ê –º—ã –¥–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∏–º –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –≤–µ—Ä–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –∏ —Å–¥–µ–ª–∞—Ç—å –≤–µ–±–∏–Ω–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –≤–∞—Å."""
    
    text3 = """–ê –µ—â—ë ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –Ω–∞—à–µ–π –±–æ–ª—å—à–æ–π –º–∏—Å—Å–∏–∏ ‚òùÔ∏è –ú—ã –∏–∑—É—á–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —Ü–µ–ª—å—é —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã.

–û–ø—Ä–æ—Å —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º, –∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ –Ω–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è."""
    
    text4 = """‚öïÔ∏è –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ ‚Äî –≤–∫–ª–∞–¥ –≤ —Ä–µ—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–Ω–æ–π –∑–∞–¥–∞—á–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∂–∏–∑–Ω–µ–π.

–ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–∏–º —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º —É—Å–∏–ª–∏—è–º –º—ã —Å–º–æ–∂–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —è–∑—ã–∫–µ —Ñ–∞–∫—Ç–æ–≤ ‚Äî –∏ –º–µ–Ω—è—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –∏ –ª–µ—á–µ–Ω–∏—é —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –≤ –º–∞—Å—à—Ç–∞–±–∞—Ö —Å—Ç—Ä–∞–Ω—ã."""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º
    await message.answer(text1)
    await asyncio.sleep(5)
    await message.answer(text2)
    await asyncio.sleep(5)
    await message.answer(text3)
    await asyncio.sleep(5)
    await message.answer(text4)
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 15 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(15)
    
    await start_survey(message, state)

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ü–†–û–°–ê (–ü–û–õ–ù–´–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï)
# ============================================================================

async def start_survey(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await log_user_interaction(message.from_user.id, "survey_started")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if hasattr(message, 'message_id') and message.message_id > 1:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        for i in range(max(1, message.message_id - 10), message.message_id):
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=i)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 1</b>
–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?
(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)"""
    
    await message.answer(text, parse_mode="HTML")
    await state.set_state(UserStates.survey_age)

@router.message(StateFilter(UserStates.survey_age))
async def handle_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await log_user_interaction(message.from_user.id, "age_entered", message.text)
    
    try:
        age = int(message.text.strip())
        if age < 1 or age > 120:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
            return
        
        await state.update_data(age=age)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–ø—Ä–æ—Å
        await message.delete()
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (–æ–±—ã—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ)
        if message.message_id > 1:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
            except:
                pass
       
        text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 2</b>

–í–∞—à –ø–æ–ª"""
        
        keyboard = get_gender_keyboard()
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(UserStates.survey_gender)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.callback_query(F.data.in_(["gender_female", "gender_male"]), StateFilter(UserStates.survey_gender))
async def handle_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "gender_selected", callback.data)
    
    gender = "–ñ–µ–Ω—Å–∫–∏–π" if callback.data == "gender_female" else "–ú—É–∂—Å–∫–æ–π"
    await state.update_data(gender=gender)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 3</b>
–ì–¥–µ –≤—ã –∂–∏–≤—ë—Ç–µ?
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:"""
    
    keyboard = get_location_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_location)

@router.callback_query(F.data.startswith("location_"), StateFilter(UserStates.survey_location))
async def handle_location(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "location_selected", callback.data)
    
    location_map = {
        "location_big_city": "–ì–æ—Ä–æ–¥ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º >1 –º–ª–Ω",
        "location_medium_city": "–ì–æ—Ä–æ–¥ 500‚Äì999 —Ç—ã—Å",
        "location_small_city": "–ì–æ—Ä–æ–¥ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º 100‚Äì500 —Ç—ã—Å",
        "location_town": "–ì–æ—Ä–æ–¥ –¥–æ 100 —Ç—ã—Å",
        "location_village": "–ü–æ—Å–µ–ª–æ–∫ / —Å–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å"
    }
    
    location = location_map[callback.data]
    await state.update_data(location=location)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 4</b>
–í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
    
    keyboard = get_education_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_education)

@router.callback_query(F.data.startswith("education_"), StateFilter(UserStates.survey_education))
async def handle_education(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "education_selected", callback.data)
    
    education_map = {
        "education_secondary": "–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ",
        "education_vocational": "–°—Ä–µ–¥–Ω–µ-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ",
        "education_higher": "–í—ã—Å—à–µ–µ (–Ω–µ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ)",
        "education_medical": "–í—ã—Å—à–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ"
    }
    
    education = education_map[callback.data]
    await state.update_data(education=education)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 5</b>
–í–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
    
    keyboard = get_family_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_family)

@router.callback_query(F.data.startswith("family_"), StateFilter(UserStates.survey_family))
async def handle_family(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "family_selected", callback.data)
    
    family_map = {
        "family_single": "–•–æ–ª–æ—Å—Ç / –Ω–µ –∑–∞–º—É–∂–µ–º",
        "family_married": "–í –±—Ä–∞–∫–µ",
        "family_divorced": "–†–∞–∑–≤–µ–¥—ë–Ω(–∞) / –≤–¥–æ–≤(–µ—Ü/–∞)"
    }
    
    family = family_map[callback.data]
    await state.update_data(family_status=family)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 6</b>
–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ—Ç–∏?
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
    
    keyboard = get_children_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_children)

@router.callback_query(F.data.startswith("children_"), StateFilter(UserStates.survey_children))
async def handle_children(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–µ—Ç–µ–π"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "children_selected", callback.data)
    
    children_map = {
        "children_none": "–ù–µ—Ç",
        "children_one": "–î–∞, –æ–¥–∏–Ω",
        "children_multiple": "–î–∞, –¥–≤–æ–µ –∏ –±–æ–ª–µ–µ"
    }
    
    children = children_map[callback.data]
    await state.update_data(children=children)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 7</b>
–°—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ 1 —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–µ–º—å–µ 
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
    
    keyboard = get_income_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_income)

@router.callback_query(F.data.startswith("income_"), StateFilter(UserStates.survey_income))
async def handle_income(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Ö–æ–¥–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "income_selected", callback.data)
    
    income_map = {
        "income_low": "–î–æ 20 000 ‚ÇΩ",
        "income_medium": "20‚Äì40 —Ç—ã—Å ‚ÇΩ",
        "income_high": "40‚Äì70 —Ç—ã—Å ‚ÇΩ",
        "income_very_high": "–ë–æ–ª–µ–µ 70 —Ç—ã—Å ‚ÇΩ",
        "income_no_answer": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"
    }
    
    income = income_map[callback.data]
    await state.update_data(income=income)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 8</b>
–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10?
(0 ‚Äî –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ, 10 ‚Äî –æ—Ç–ª–∏—á–Ω–æ)

–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"""
    
    await safe_edit_message(callback.message, text)
    await state.set_state(UserStates.survey_health)

@router.message(StateFilter(UserStates.survey_health))
async def handle_health_rating(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    await log_user_interaction(message.from_user.id, "health_rating_entered", message.text)
    
    try:
        health_rating = int(message.text.strip())
        if health_rating < 0 or health_rating > 10:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
            return
        
        await state.update_data(health_rating=health_rating)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–ø—Ä–æ—Å
        await message.delete()
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (–æ–±—ã—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ)
        if message.message_id > 1:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
            except:
                pass

        text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 9</b>
–ù–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, –∫–∞–∫–∞—è –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω —á–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–º–µ—Ä—Ç–∏ –ª—é–¥–µ–π –≤ –º–∏—Ä–µ? 
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
        
        keyboard = get_death_cause_keyboard()
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(UserStates.survey_death_cause)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")


@router.callback_query(F.data.startswith("death_cause_"), StateFilter(UserStates.survey_death_cause))
async def handle_death_cause(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã —Å–º–µ—Ä—Ç–∏"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "death_cause_selected", callback.data)
    
    cause_map = {
        "death_cause_cancer": "–û–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è",
        "death_cause_cardio": "–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è",
        "death_cause_infections": "–ò–Ω—Ñ–µ–∫—Ü–∏–∏",
        "death_cause_respiratory": "–ë–æ–ª–µ–∑–Ω–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π",
        "death_cause_digestive": "–ë–æ–ª–µ–∑–Ω–∏ –∂–µ–ª—É–¥–æ—á–Ω–æ-–∫–∏—à–µ—á–Ω–æ–≥–æ —Ç—Ä–∞–∫—Ç–∞",
        "death_cause_external": "–í–Ω–µ—à–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã"
    }
    
    death_cause = cause_map[callback.data]
    await state.update_data(death_cause=death_cause)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 10</b>
–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —Å–µ—Ä–¥—Ü–∞ –∏–ª–∏ —Å–æ—Å—É–¥–æ–≤?
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
    
    keyboard = get_heart_disease_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_heart_disease)

@router.callback_query(F.data.startswith("heart_disease_"), StateFilter(UserStates.survey_heart_disease))
async def handle_heart_disease(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π —Å–µ—Ä–¥—Ü–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "heart_disease_selected", callback.data)
    
    disease_map = {
        "heart_disease_yes": "–î–∞",
        "heart_disease_no": "–ù–µ—Ç",
        "heart_disease_unknown": "–ù–µ –∑–Ω–∞—é / –Ω–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–ª—Å—è(–∞—Å—å)"
    }
    
    heart_disease = disease_map[callback.data]
    await state.update_data(heart_disease=heart_disease)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 11</b>
–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ä–∏—Å–∫? 
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
    
    keyboard = get_cv_risk_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_cv_risk)

@router.callback_query(F.data.startswith("cv_risk_"), StateFilter(UserStates.survey_cv_risk))
async def handle_cv_risk(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ —Ä–∏—Å–∫–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "cv_risk_selected", callback.data)
    
    risk_map = {
        "cv_risk_low": "–Ω–∏–∑–∫–∏–π/—É–º–µ—Ä–µ–Ω–Ω—ã–π",
        "cv_risk_high": "–≤—ã—Å–æ–∫–∏–π",
        "cv_risk_very_high": "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
    }
    
    cv_risk = risk_map[callback.data]
    await state.update_data(cv_risk=cv_risk)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 12</b>
–°–ª—ã—à–∞–ª–∏ –ª–∏ –≤—ã —Ä–∞–Ω—å—à–µ –æ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π?
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
    
    keyboard = get_cv_knowledge_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_cv_knowledge)

@router.callback_query(F.data.startswith("cv_knowledge_"), StateFilter(UserStates.survey_cv_knowledge))
async def handle_cv_knowledge(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–Ω–∏—è –æ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö —Ä–∏—Å–∫–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "cv_knowledge_selected", callback.data)
    
    knowledge_map = {
        "cv_knowledge_good": "–î–∞, —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å",
        "cv_knowledge_some": "–î–∞, –Ω–æ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–Ω–∏–º–∞—é",
        "cv_knowledge_none": "–ù–µ—Ç / –ø–æ—á—Ç–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é"
    }
    
    cv_knowledge = knowledge_map[callback.data]
    await state.update_data(cv_knowledge=cv_knowledge)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 13</b>
–ß—Ç–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø–∞—Å–Ω—ã–º –¥–ª—è —Å–µ—Ä–¥—Ü–∞?
(–≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)"""
    
    await state.update_data(heart_danger_selected=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    keyboard = get_heart_danger_keyboard([])
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_heart_danger)

@router.callback_query(F.data.startswith("heart_danger_"), StateFilter(UserStates.survey_heart_danger))
async def handle_heart_danger(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–µ—Ä–¥—Ü–∞ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –¥–æ 3)"""
    await safe_answer_callback(callback)
    
    data = await state.get_data()
    selected = data.get('heart_danger_selected', [])
    
    if callback.data == "heart_danger_done":
        if not selected:
            await safe_answer_callback(callback, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
            return
        
        await state.update_data(heart_danger=selected)
        await log_user_interaction(callback.from_user.id, "heart_danger_completed", f"Selected: {len(selected)} items")
        
        text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 14</b>
–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è –≤–∞–∂–Ω–æ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–µ—Ä–¥—Ü–∞?
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
        
        keyboard = get_health_importance_keyboard()
        await safe_edit_message(callback.message, text, reply_markup=keyboard)
        await state.set_state(UserStates.survey_health_importance)
        return
    
    danger_map = {
        "heart_danger_age": "–í–æ–∑—Ä–∞—Å—Ç",
        "heart_danger_male": "–ú—É–∂—Å–∫–æ–π –ø–æ–ª",
        "heart_danger_family": "–°–µ–º–µ–π–Ω—ã–π –∞–Ω–∞–º–Ω–µ–∑ —Ä–∞–Ω–Ω–∏—Ö —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
        "heart_danger_pressure": "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ",
        "heart_danger_cholesterol": "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω",
        "heart_danger_glucose": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã –≤ –∫—Ä–æ–≤–∏",
        "heart_danger_weight": "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å",
        "heart_danger_smoking": "–ö—É—Ä–µ–Ω–∏–µ",
        "heart_danger_alcohol": "–ê–ª–∫–æ–≥–æ–ª—å",
        "heart_danger_nutrition": "–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
        "heart_danger_sedentary": "–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        "heart_danger_stress": "–°—Ç—Ä–µ—Å—Å—ã",
        "heart_danger_sleep": "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–Ω–∞, —Ö—Ä–∞–ø"
    }
    
    danger_option = danger_map.get(callback.data)
    if danger_option:
        if danger_option in selected:
            selected.remove(danger_option)
        else:
            if len(selected) < 3:
                selected.append(danger_option)
            else:
                await safe_answer_callback(callback, "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞", show_alert=True)
                return
        
        await state.update_data(heart_danger_selected=selected)
        keyboard = get_heart_danger_keyboard(selected)
        await safe_edit_message(callback.message, callback.message.text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("health_importance_"), StateFilter(UserStates.survey_health_importance))
async def handle_health_importance(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–µ—Ä–¥—Ü–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "health_importance_selected", callback.data)
    
    importance_map = {
        "health_importance_elderly": "–≠—Ç–æ –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö / —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏ –±–æ–ª—å–Ω—ã—Ö, –Ω–µ –ø—Ä–æ –º–µ–Ω—è",
        "health_importance_secondary": "–í–∞–∂–Ω–æ, –Ω–æ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ",
        "health_importance_understand": "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ, –Ω–æ —Ä–∞–Ω—å—à–µ –æ–± —ç—Ç–æ–º –Ω–µ –¥—É–º–∞–ª(–∞)",
        "health_importance_plan": "–û—Å–æ–∑–Ω–∞—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å ‚Äî –ø–ª–∞–Ω–∏—Ä—É—é –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"
    }
    
    health_importance = importance_map[callback.data]
    await state.update_data(health_importance=health_importance)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 15</b>
–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –ª–∏ –≤—ã –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø —Ä–∞–Ω–µ–µ?
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
    
    keyboard = get_checkup_history_keyboard()
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_checkup_history)

@router.callback_query(F.data.startswith("checkup_history_"), StateFilter(UserStates.survey_checkup_history))
async def handle_checkup_history(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø–æ–≤"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "checkup_history_selected", callback.data)
    
    history_map = {
        "checkup_history_recent": "–î–∞, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤",
        "checkup_history_old": "–î–∞, –±–æ–ª–µ–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥",
        "checkup_history_never": "–ù–µ—Ç, –Ω–∏–∫–æ–≥–¥–∞",
        "checkup_history_forgot": "–ù–µ –ø–æ–º–Ω—é"
    }
    
    checkup_history = history_map[callback.data]
    await state.update_data(checkup_history=checkup_history)
    
    text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 16</b>
–ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø, —Ç–æ –∫–∞–∫–∏–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ–Ω –≤–∫–ª—é—á–∞–ª? 
(–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)"""
    
    await state.update_data(checkup_content_selected=[])
    keyboard = get_checkup_content_keyboard([])
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.survey_checkup_content)

@router.callback_query(F.data.startswith("checkup_content_"), StateFilter(UserStates.survey_checkup_content))
async def handle_checkup_content(callback: CallbackQuery, state: FSMContext):
    """–ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø–∞"""
    await safe_answer_callback(callback)
    
    data = await state.get_data()
    selected = data.get('checkup_content_selected', [])
    
    if callback.data == "checkup_content_done":
        await state.update_data(checkup_content=selected)
        await log_user_interaction(callback.from_user.id, "checkup_content_completed", f"Selected: {len(selected)} items")
        
        text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 17</b>
–ß—Ç–æ –º–µ—à–∞–µ—Ç –≤–∞–º –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–µ–π—á–∞—Å?
(–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)"""
        
        await state.update_data(prevention_barriers_selected=[])
        keyboard = get_prevention_barriers_keyboard([])
        await safe_edit_message(callback.message, text, reply_markup=keyboard)
        await state.set_state(UserStates.survey_prevention_barriers)
        return
    
    # –¢–û–ß–ù–û–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    content_map = {
        "checkup_content_consultation": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ—Å–º–æ—Ç—Ä –≤—Ä–∞—á–∞-–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞ / —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞",
        "checkup_content_risk_assessment": "–û—Ü–µ–Ω–∫–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
        "checkup_content_lipids": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–∏–ø–∏–¥–æ–≤ –∫—Ä–æ–≤–∏",
        "checkup_content_glucose": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã –∫—Ä–æ–≤–∏",
        "checkup_content_ecg": "–≠–ö–ì",
        "checkup_content_ultrasound": "–£–ó–ò —Å–æ—Å—É–¥–æ–≤ (–¥—É–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
        "checkup_content_echo": "–≠—Ö–æ–ö–ì",
        "checkup_content_monitoring": "–°—É—Ç–æ—á–Ω–æ–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è",
        "checkup_content_ct": "–ú–°–ö–¢-–∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–π –∫–∞–ª—å—Ü–∏–π",
        "checkup_content_calc": "–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –°–°-—Ä–∏—Å–∫–∞"
    }
    
    if callback.data == "checkup_content_skip":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞)"
        if "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞)" in selected:
            selected.remove("–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞)")
        else:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞)"
            selected.clear()
            selected.append("–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞)")
        
        await state.update_data(checkup_content_selected=selected)
        keyboard = get_checkup_content_keyboard(selected)
        await safe_edit_message(callback.message, callback.message.text, reply_markup=keyboard)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    content_option = content_map.get(callback.data)
    if content_option:
        # –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–ø—Ü–∏—é, —É–±–∏—Ä–∞–µ–º "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞)"
        if "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞)" in selected:
            selected.remove("–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞)")
        
        if content_option in selected:
            selected.remove(content_option)
        else:
            selected.append(content_option)
        
        await state.update_data(checkup_content_selected=selected)
        keyboard = get_checkup_content_keyboard(selected)
        await safe_edit_message(callback.message, callback.message.text, reply_markup=keyboard)
        return
    
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
    await safe_answer_callback(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)


@router.callback_query(F.data.startswith("prevention_barriers_"), StateFilter(UserStates.survey_prevention_barriers))
async def handle_prevention_barriers(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)"""
    await safe_answer_callback(callback)
    
    data = await state.get_data()
    selected = data.get('prevention_barriers_selected', [])
    
    if callback.data == "prevention_barriers_done":
        await state.update_data(prevention_barriers=selected)
        await log_user_interaction(callback.from_user.id, "prevention_barriers_completed", f"Selected: {len(selected)} items")
        
        text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 18</b>
–° –∫–µ–º –≤—ã –æ–±—ã—á–Ω–æ —Å–æ–≤–µ—Ç—É–µ—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º?
(–≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ 2 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)"""
        
        await state.update_data(health_advice_selected=[])
        keyboard = get_health_advice_keyboard([])
        await safe_edit_message(callback.message, text, reply_markup=keyboard)
        await state.set_state(UserStates.survey_health_advice)
        return
    
    if callback.data == "prevention_barriers_other":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç:")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è "–î—Ä—É–≥–æ–µ"
        return
    
    barriers_map = {
        "prevention_barriers_no_symptoms": "–ù–µ –≤–∏–∂—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –Ω–µ—Ç —Å–∏–º–ø—Ç–æ–º–æ–≤",
        "prevention_barriers_fear": "–°—Ç—Ä–∞—Ö —É—Å–ª—ã—à–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑",
        "prevention_barriers_money": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
        "prevention_barriers_time": "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏",
        "prevention_barriers_knowledge": "–ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å",
        "prevention_barriers_doctor": "–£–∂–µ –Ω–∞–±–ª—é–¥–∞—é—Å—å —É –≤—Ä–∞—á–∞",
        "prevention_barriers_nothing": "–ù–∏—á–µ–≥–æ"
    }
    
    barrier_option = barriers_map.get(callback.data)
    if barrier_option:
        if barrier_option in selected:
            selected.remove(barrier_option)
        else:
            selected.append(barrier_option)
        
        await state.update_data(prevention_barriers_selected=selected)
        keyboard = get_prevention_barriers_keyboard(selected)
        await safe_edit_message(callback.message, callback.message.text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("health_advice_"), StateFilter(UserStates.survey_health_advice))
async def handle_health_advice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –¥–æ 2)"""
    await safe_answer_callback(callback)
    
    data = await state.get_data()
    selected = data.get('health_advice_selected', [])
    
    if callback.data == "health_advice_done":
        if not selected:
            await safe_answer_callback(callback, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
            return
        
        await state.update_data(health_advice=selected)
        await log_user_interaction(callback.from_user.id, "health_advice_completed", f"Selected: {len(selected)} items")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            await save_survey_data(callback.from_user.id, await state.get_data())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è {callback.from_user.id}: {e}")
            await safe_edit_message(callback.message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /restart")
            return
        
        text = """‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å! 

–ú—ã –ø–æ–¥—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –æ—Å—Ç–∞—é—Ç—Å—è –≤–Ω–µ —Ñ–æ–∫—É—Å–∞, –Ω–æ –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è—é—Ç –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤.

–ù–∞ –≤–µ–±–∏–Ω–∞—Ä–µ —ç—Ç–∏ —Ç–µ—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –Ω–µ —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–æ–≤, –Ω–æ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞, —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–≤–æ–≥–∏, –¥–µ–ø—Ä–µ—Å—Å–∏–∏, –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –¥—Ä.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∏—Ö –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞ ‚Äî —Ç–∞–∫ –≤—ã –∏–∑–≤–ª–µ—á–µ—Ç–µ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã –∏ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ —Å–≤–æ–µ–º—É —Å–ª—É—á–∞—é. 

üëâ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø—Ä–∏—à–ª—é –≤–∞–º —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤–µ–±–∏–Ω–∞—Ä—É."""
        
        await safe_edit_message(callback.message, text)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        
        await start_tests(callback.message, state)
        return
    
    advice_map = {
        "health_advice_doctor": "–° –≤—Ä–∞—á–æ–º",
        "health_advice_relatives": "–° —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏",
        "health_advice_colleagues": "–° –∫–æ–ª–ª–µ–≥–∞–º–∏",
        "health_advice_internet": "–ß–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (—Å—Ç–∞—Ç—å–∏, —Ñ–æ—Ä—É–º—ã)",
        "health_advice_blogger": "–° –≤—Ä–∞—á–æ–º-–±–ª–æ–≥–µ—Ä–æ–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
        "health_advice_nobody": "–ù–∏ —Å –∫–µ–º"
    }
    
    advice_option = advice_map.get(callback.data)
    if advice_option:
        if advice_option in selected:
            selected.remove(advice_option)
        else:
            if len(selected) < 2:
                selected.append(advice_option)
            else:
                await safe_answer_callback(callback, "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞", show_alert=True)
                return
        
        await state.update_data(health_advice_selected=selected)
        keyboard = get_health_advice_keyboard(selected)
        await safe_edit_message(callback.message, callback.message.text, reply_markup=keyboard)

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–°–¢–û–í (–ü–û–õ–ù–´–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï)
# ============================================================================

async def start_tests(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await log_user_interaction(message.from_user.id, "tests_started")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∞–º
    
    text = """–¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    await state.update_data(completed_tests={})
    
    keyboard = get_test_selection_keyboard()
    
    try:
        await safe_edit_message(message, text, reply_markup=keyboard)
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=keyboard)
    
    await state.set_state(UserStates.test_selection)
    
@router.callback_query(F.data.startswith("test_"), StateFilter(UserStates.test_selection))
async def handle_test_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "test_selected", callback.data)
    
    if callback.data == "test_hads":
        await start_hads_test(callback.message, state)
    elif callback.data == "test_burns":
        await start_burns_test(callback.message, state)
    elif callback.data == "test_isi":
        await start_isi_test(callback.message, state)
    elif callback.data == "test_stop_bang":
        await start_stop_bang_test(callback.message, state)
    elif callback.data == "test_ess":
        await start_ess_test(callback.message, state)
    elif callback.data == "test_fagerstrom":
        await start_fagerstrom_test(callback.message, state)
    elif callback.data == "test_fagerstrom_skip":
        await state.update_data(fagerstrom_score=None, fagerstrom_skipped=True)
        await show_test_menu(callback.message, state)
    elif callback.data == "test_audit":
        await start_audit_test(callback.message, state)
    elif callback.data == "test_audit_skip":
        await state.update_data(audit_score=None, audit_skipped=True)
        await show_test_menu(callback.message, state)
    elif callback.data == "test_complete":
        await complete_all_tests(callback.message, state)

async def show_test_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    data = await state.get_data()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
    keyboard = get_test_selection_keyboard(data)
    
    await safe_edit_message(message, text, reply_markup=keyboard)
    await state.set_state(UserStates.test_selection)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏
async def start_hads_test(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ HADS"""
    from surveys import get_hads_questions
    
    questions = get_hads_questions()
    await state.update_data(
        current_test="hads",
        test_questions=questions,
        current_question_index=0,
        test_answers=[]
    )
    
    text = """üü£ <b>–¢–µ—Å—Ç 1. –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ ‚Äî HADS</b>

–¢–µ—Å—Ç HADS –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏ –∏–ª–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏.

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±—Ä–∞–≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç."""
    
    await safe_edit_message(message, text)
    await asyncio.sleep(2)
    
    await show_current_question(message, state)
    await state.set_state(UserStates.hads_test)

async def start_burns_test(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ë–µ—Ä–Ω—Å–∞"""
    from surveys import get_burns_questions
    
    questions = get_burns_questions()
    await state.update_data(
        current_test="burns",
        test_questions=questions,
        current_question_index=0,
        test_answers=[]
    )
    
    text = """üîµ <b>–¢–µ—Å—Ç 2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ ‚Äî –®–∫–∞–ª–∞ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –ë–µ—Ä–Ω—Å–∞</b>

–¢–µ—Å—Ç –ë–µ—Ä–Ω—Å–∞ –ø–æ–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω.

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ü–µ–Ω–∏–≤ –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 4."""
    
    await safe_edit_message(message, text)
    await asyncio.sleep(2)
    
    await show_current_question(message, state)
    await state.set_state(UserStates.burns_test)

async def start_isi_test(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ISI"""
    from surveys import get_isi_questions
    
    questions = get_isi_questions()
    await state.update_data(
        current_test="isi",
        test_questions=questions,
        current_question_index=0,
        test_answers=[]
    )
    
    text = """üåô <b>–¢–µ—Å—Ç 3. –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ ‚Äî ISI</b>

–¢–µ—Å—Ç ISI –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å —É –≤–∞—Å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–µ—Å—Å–æ–Ω–Ω–∏—Ü—ã –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ —Å–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞."""
    
    await safe_edit_message(message, text)
    await asyncio.sleep(2)
    
    await show_current_question(message, state)
    await state.set_state(UserStates.isi_test)

async def start_stop_bang_test(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ STOP-BANG"""
    from surveys import get_stop_bang_questions
    
    questions = get_stop_bang_questions()
    await state.update_data(
        current_test="stop_bang",
        test_questions=questions,
        current_question_index=0,
        test_answers=[]
    )
    
    text = """üò¥ <b>–¢–µ—Å—Ç 4. –†–∏—Å–∫ –∞–ø–Ω–æ—ç —Å–Ω–∞ ‚Äî STOP-BANG</b>

–¢–µ—Å—Ç STOP-BANG –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ä–∏—Å–∫ –∞–ø–Ω–æ—ç —Å–Ω–∞ ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –¥—ã—Ö–∞–Ω–∏–µ –≤–æ —Å–Ω–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è. –ï–≥–æ –æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–∞—Å—Ç–æ –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è, —Ö–æ—Ç—è –∞–ø–Ω–æ—ç —Å–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∏—Å–∫–æ–º –∏–Ω—Ñ–∞—Ä–∫—Ç–∞ –∏ –∏–Ω—Å—É–ª—å—Ç–∞."""
    
    await safe_edit_message(message, text)
    await asyncio.sleep(2)
    
    await show_current_question(message, state)
    await state.set_state(UserStates.stop_bang_test)

async def start_ess_test(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ESS"""
    from surveys import get_ess_questions
    
    questions = get_ess_questions()
    await state.update_data(
        current_test="ess",
        test_questions=questions,
        current_question_index=0,
        test_answers=[]
    )
    
    text = """üò¥ <b>–¢–µ—Å—Ç 5. –°–æ–Ω–ª–∏–≤–æ—Å—Ç—å –¥–Ω—ë–º ‚Äî ESS</b>

–¢–µ—Å—Ç ESS –ø–æ–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–Ω–µ–≤–Ω–æ–π —Å–æ–Ω–ª–∏–≤–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –¥–∞–≤–ª–µ–Ω–∏–µ, —Ä–∞–±–æ—Ç—É —Å–µ—Ä–¥—Ü–∞ –∏ –æ–±—â–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ."""
    
    await safe_edit_message(message, text)
    await asyncio.sleep(2)
    
    await show_current_question(message, state)
    await state.set_state(UserStates.ess_test)

async def start_fagerstrom_test(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –§–∞–≥–µ—Ä—Å—Ç—Ä–µ–º–∞"""
    from surveys import get_fagerstrom_questions
    
    questions = get_fagerstrom_questions()
    await state.update_data(
        current_test="fagerstrom",
        test_questions=questions,
        current_question_index=0,
        test_answers=[]
    )
    
    text = """üö¨ <b>–¢–µ—Å—Ç 6. –ù–∏–∫–æ—Ç–∏–Ω–æ–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚Äî –§–∞–≥–µ—Ä—Å—Ç—Ä–µ–º</b>

–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∏–∫–æ—Ç–∏–Ω–æ–≤–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É –∫—É—Ä—è—â–∏—Ö –ª—é–¥–µ–π."""
    
    await safe_edit_message(message, text)
    await asyncio.sleep(2)
    
    await show_current_question(message, state)
    await state.set_state(UserStates.fagerstrom_test)

async def start_audit_test(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ AUDIT"""
    from surveys import get_audit_questions
    
    questions = get_audit_questions()
    await state.update_data(
        current_test="audit",
        test_questions=questions,
        current_question_index=0,
        test_answers=[]
    )
    
    text = """üç∑ <b>–¢–µ—Å—Ç 7. –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è ‚Äî RUS-AUDIT</b>

–¢–µ—Å—Ç AUDIT –ø–æ–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –Ω–∞ —Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ."""
    
    await safe_edit_message(message, text)
    await asyncio.sleep(2)
    
    await show_current_question(message, state)
    await state.set_state(UserStates.audit_test)

async def show_current_question(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()
    questions = data['test_questions']
    current_index = data['current_question_index']
    current_test = data['current_test']
    
    if current_index >= len(questions):
        await complete_current_test(message, state)
        return
    
    question = questions[current_index]
    
    text = f"<b>–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {len(questions)}</b>\n\n{question['text']}"
    
    if question.get('info_text'):
        text += f"\n\n‚ÑπÔ∏è {question['info_text']}"
    
    keyboard = get_question_keyboard(question, current_test)
    await safe_edit_message(message, text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("answer_"))
async def handle_test_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await safe_answer_callback(callback)
    
    data = await state.get_data()
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if 'current_test' not in data:
        logger.warning(f"–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}. –ü—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        current_fsm_state = await state.get_state()
        
        if current_fsm_state:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ—Å—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é FSM
            if "hads_test" in current_fsm_state:
                await state.update_data(current_test="hads")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                from surveys import get_hads_questions
                questions = get_hads_questions()
                await state.update_data(
                    test_questions=questions,
                    current_question_index=0,
                    test_answers=[]
                )
            elif "burns_test" in current_fsm_state:
                await state.update_data(current_test="burns")
                from surveys import get_burns_questions
                questions = get_burns_questions()
                await state.update_data(
                    test_questions=questions,
                    current_question_index=0,
                    test_answers=[]
                )
            elif "isi_test" in current_fsm_state:
                await state.update_data(current_test="isi")
                from surveys import get_isi_questions
                questions = get_isi_questions()
                await state.update_data(
                    test_questions=questions,
                    current_question_index=0,
                    test_answers=[]
                )
            elif "stop_bang_test" in current_fsm_state:
                await state.update_data(current_test="stop_bang")
                from surveys import get_stop_bang_questions
                questions = get_stop_bang_questions()
                await state.update_data(
                    test_questions=questions,
                    current_question_index=0,
                    test_answers=[]
                )
            elif "ess_test" in current_fsm_state:
                await state.update_data(current_test="ess")
                from surveys import get_ess_questions
                questions = get_ess_questions()
                await state.update_data(
                    test_questions=questions,
                    current_question_index=0,
                    test_answers=[]
                )
            elif "fagerstrom_test" in current_fsm_state:
                await state.update_data(current_test="fagerstrom")
                from surveys import get_fagerstrom_questions
                questions = get_fagerstrom_questions()
                await state.update_data(
                    test_questions=questions,
                    current_question_index=0,
                    test_answers=[]
                )
            elif "audit_test" in current_fsm_state:
                await state.update_data(current_test="audit")
                from surveys import get_audit_questions
                questions = get_audit_questions()
                await state.update_data(
                    test_questions=questions,
                    current_question_index=0,
                    test_answers=[]
                )
            else:
                # –ù–µ –º–æ–∂–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤
                await safe_edit_message(
                    callback.message,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤.",
                    reply_markup=get_test_selection_keyboard()
                )
                await state.set_state(UserStates.test_selection)
                return
        else:
            # –°–æ–≤—Å–µ–º –ø–æ—Ç–µ—Ä—è–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            await safe_edit_message(
                callback.message,
                "‚ùå –°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ:",
                reply_markup=get_test_selection_keyboard()
            )
            await state.set_state(UserStates.test_selection)
            return
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    current_test = data.get('current_test')
    current_index = data.get('current_question_index', 0)
    answers = data.get('test_answers', [])
    
    if not current_test:
        await safe_edit_message(
            callback.message,
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ:",
            reply_markup=get_test_selection_keyboard()
        )
        await state.set_state(UserStates.test_selection)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ callback_data
    try:
        score = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await safe_answer_callback(callback, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", show_alert=True)
        return
    
    answers.append(score)
    
    await log_user_interaction(callback.from_user.id, f"{current_test}_answer", f"Q{current_index+1}: {score}")
    
    await state.update_data(
        test_answers=answers,
        current_question_index=current_index + 1
    )
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await show_current_question(callback.message, state)

async def complete_current_test(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    data = await state.get_data()
    current_test = data['current_test']
    answers = data['test_answers']
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total_score = sum(answers)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ—Å—Ç–∞
    if current_test == "hads":
        # –î–ª—è HADS –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —Ç—Ä–µ–≤–æ–≥—É –∏ –¥–µ–ø—Ä–µ—Å—Å–∏—é
        from surveys import calculate_hads_scores, get_hads_interpretation
        anxiety_score, depression_score = calculate_hads_scores(answers)
        
        await state.update_data(
            hads_anxiety_score=anxiety_score,
            hads_depression_score=depression_score,
            hads_score=total_score,
            completed_hads=True  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        )
        result_text = get_hads_interpretation(anxiety_score, depression_score)
        
    elif current_test == "burns":
        from surveys import get_burns_interpretation
        await state.update_data(
            burns_score=total_score,
            completed_burns=True
        )
        result_text = get_burns_interpretation(total_score)
        
    elif current_test == "isi":
        from surveys import get_isi_interpretation
        await state.update_data(
            isi_score=total_score,
            completed_isi=True
        )
        result_text = get_isi_interpretation(total_score)
        
    elif current_test == "stop_bang":
        from surveys import get_stop_bang_interpretation
        await state.update_data(
            stop_bang_score=total_score,
            completed_stop_bang=True
        )
        result_text = get_stop_bang_interpretation(total_score)
        
    elif current_test == "ess":
        from surveys import get_ess_interpretation
        await state.update_data(
            ess_score=total_score,
            completed_ess=True
        )
        result_text = get_ess_interpretation(total_score)
        
    elif current_test == "fagerstrom":
        from surveys import get_fagerstrom_interpretation
        await state.update_data(
            fagerstrom_score=total_score,
            completed_fagerstrom=True
        )
        result_text = get_fagerstrom_interpretation(total_score)
        
    elif current_test == "audit":
        from surveys import get_audit_interpretation
        await state.update_data(
            audit_score=total_score,
            completed_audit=True
        )
        result_text = get_audit_interpretation(total_score)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    await log_user_interaction(message.from_user.id, f"{current_test}_completed", f"Score: {total_score}")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –°–†–ê–ó–£
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_data = await state.get_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        test_data_to_save = {}
        
        if current_test == "hads":
            test_data_to_save['hads_anxiety_score'] = current_data.get('hads_anxiety_score')
            test_data_to_save['hads_depression_score'] = current_data.get('hads_depression_score')
            test_data_to_save['hads_score'] = current_data.get('hads_score')
        elif current_test == "burns":
            test_data_to_save['burns_score'] = current_data.get('burns_score')
        elif current_test == "isi":
            test_data_to_save['isi_score'] = current_data.get('isi_score')
        elif current_test == "stop_bang":
            test_data_to_save['stop_bang_score'] = current_data.get('stop_bang_score')
        elif current_test == "ess":
            test_data_to_save['ess_score'] = current_data.get('ess_score')
        elif current_test == "fagerstrom":
            test_data_to_save['fagerstrom_score'] = current_data.get('fagerstrom_score')
        elif current_test == "audit":
            test_data_to_save['audit_score'] = current_data.get('audit_score')
        
        # –í–†–ï–ú–ï–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ {current_test} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {test_data_to_save}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
        existing_data = get_user_data(message.from_user.id)
        if existing_data and existing_data.get('tests'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
            logger.info(f"–û–±–Ω–æ–≤–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Ç–∫—É –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        await state.update_data(**{f"{current_test}_saved": True})
        
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ {current_test} –¥–ª—è {message.from_user.id}: {e}")
        # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    updated_data = await state.get_data()
    logger.info(f"–¢–µ—Å—Ç {current_test} –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {message.from_user.id}. –ë–∞–ª–ª—ã: {total_score}")
    
    # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–û–î–†–û–ë–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –†–ï–ó–£–õ–¨–¢–ê–¢–û–ú (–ù–ï –£–î–ê–õ–Ø–ï–ú–û–ï)
    result_message = f"""‚úÖ <b>–¢–µ—Å—Ç {current_test.upper()} –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {total_score} –±–∞–ª–ª–æ–≤

{result_text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã <b>–í–∞–∂–Ω–æ:</b> –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –≤ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞."""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –û–¢–î–ï–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ)
    result_msg = await message.answer(result_message, parse_mode="HTML")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
    await asyncio.sleep(3)
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    continue_text = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤:"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤", callback_data="continue_tests")]
    ])
    
    await message.answer(continue_text, reply_markup=keyboard, parse_mode="HTML")

@router.message(StateFilter(UserStates.survey_health))
async def handle_health_rating(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    await log_user_interaction(message.from_user.id, "health_rating_entered", message.text)
    
    try:
        health_rating = int(message.text.strip())
        if health_rating < 0 or health_rating > 10:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
            return
        
        await state.update_data(health_rating=health_rating)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–ø—Ä–æ—Å
        try:
            await message.delete()
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (–æ–±—ã—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ)
            if message.message_id > 1:
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
                except:
                    pass
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        text = """<b>‚ùì –í–æ–ø—Ä–æ—Å 9</b>
–ù–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, –∫–∞–∫–∞—è –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω —á–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–º–µ—Ä—Ç–∏ –ª—é–¥–µ–π –≤ –º–∏—Ä–µ? 
(–≤—ã–±–µ—Ä–∏—Ç–µ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)"""
        
        keyboard = get_death_cause_keyboard()
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(UserStates.survey_death_cause)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")

async def complete_all_tests(message: Message, state: FSMContext):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None –∑–Ω–∞—á–µ–Ω–∏–π"""
    data = await state.get_data()
    
    # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None
    test_results = {}
    
    # HADS
    if 'hads_anxiety_score' in data and 'hads_depression_score' in data:
        test_results['hads_anxiety_score'] = data['hads_anxiety_score']
        test_results['hads_depression_score'] = data['hads_depression_score']
        test_results['hads_score'] = data.get('hads_score', data['hads_anxiety_score'] + data['hads_depression_score'])
        logger.info(f"HADS –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: —Ç—Ä–µ–≤–æ–≥–∞={test_results['hads_anxiety_score']}, –¥–µ–ø—Ä–µ—Å—Å–∏—è={test_results['hads_depression_score']}")
    
    # Burns
    if 'burns_score' in data:
        test_results['burns_score'] = data['burns_score']
        logger.info(f"Burns –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {test_results['burns_score']}")
    
    # ISI
    if 'isi_score' in data:
        test_results['isi_score'] = data['isi_score']
        logger.info(f"ISI –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {test_results['isi_score']}")
    
    # STOP-BANG
    if 'stop_bang_score' in data:
        test_results['stop_bang_score'] = data['stop_bang_score']
        logger.info(f"STOP-BANG –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {test_results['stop_bang_score']}")
    
    # ESS
    if 'ess_score' in data:
        test_results['ess_score'] = data['ess_score']
        logger.info(f"ESS –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {test_results['ess_score']}")
    
    # Fagerstrom - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    if 'fagerstrom_score' in data and data['fagerstrom_score'] is not None:
        test_results['fagerstrom_score'] = data['fagerstrom_score']
        logger.info(f"Fagerstrom –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {test_results['fagerstrom_score']}")
    elif 'fagerstrom_skipped' in data and data['fagerstrom_skipped']:
        test_results['fagerstrom_skipped'] = True
        logger.info(f"Fagerstrom –ø—Ä–æ–ø—É—â–µ–Ω")
    elif 'completed_fagerstrom' in data:
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ—Ç –±–∞–ª–ª–∞ - –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω
        test_results['fagerstrom_skipped'] = True
        logger.info(f"Fagerstrom –∑–∞–≤–µ—Ä—à–µ–Ω –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π")
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        test_results['fagerstrom_skipped'] = True
        logger.info(f"Fagerstrom –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ —É–∫–∞–∑–∞–Ω)")
    
    # AUDIT - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    if 'audit_score' in data and data['audit_score'] is not None:
        test_results['audit_score'] = data['audit_score']
        logger.info(f"AUDIT –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {test_results['audit_score']}")
    elif 'audit_skipped' in data and data['audit_skipped']:
        test_results['audit_skipped'] = True
        logger.info(f"AUDIT –ø—Ä–æ–ø—É—â–µ–Ω")
    elif 'completed_audit' in data:
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ—Ç –±–∞–ª–ª–∞ - –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω
        test_results['audit_skipped'] = True
        logger.info(f"AUDIT –∑–∞–≤–µ—Ä—à–µ–Ω –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π")
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        test_results['audit_skipped'] = True
        logger.info(f"AUDIT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ —É–∫–∞–∑–∞–Ω)")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö
    required_tests = ['hads_anxiety_score', 'burns_score', 'isi_score', 'stop_bang_score', 'ess_score']
    missing_tests = [test for test in required_tests if test not in test_results]
    
    if missing_tests:
        missing_names = {
            'hads_anxiety_score': 'HADS (—Ç—Ä–µ–≤–æ–≥–∞ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏—è)',
            'burns_score': '–¢–µ—Å—Ç –ë–µ—Ä–Ω—Å–∞',
            'isi_score': 'ISI (–∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞)',
            'stop_bang_score': 'STOP-BANG (–∞–ø–Ω–æ—ç —Å–Ω–∞)',
            'ess_score': 'ESS (–¥–Ω–µ–≤–Ω–∞—è —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å)'
        }
        
        missing_list = [missing_names.get(test, test) for test in missing_tests]
        
        error_text = f"""‚ùå <b>–û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã</b>

<b>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤:</b>
‚Ä¢ {chr(10).join(missing_list)}

<b>–ò–º–µ—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ:</b> {list(test_results.keys())}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∞–º", callback_data="back_to_tests")]
        ])
        
        await safe_edit_message(message, error_text, reply_markup=keyboard)
        return
    
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.info(f"–§–ò–ù–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {test_results}")
    
    await log_user_interaction(message.from_user.id, "all_tests_completed", f"Tests: {len(test_results)}")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {test_results}")
        save_result = await save_test_results(message.from_user.id, test_results)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –£–°–ü–ï–®–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {save_result}")
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è {message.from_user.id}: {e}")
        logger.error(f"–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞–ª–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {test_results}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        error_text = f"""‚ùå <b>–û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤. 

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>"""
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for key, value in test_results.items():
            if value is not None:
                error_text += f"\n‚Ä¢ {key}: {value}"
            else:
                error_text += f"\n‚Ä¢ {key}: –ø—Ä–æ–ø—É—â–µ–Ω"
        
        error_text += f"""

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
–û—à–∏–±–∫–∞: {str(e)[:200]}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="test_complete")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∞–º", callback_data="back_to_tests")]
        ])
        
        await safe_edit_message(message, error_text, reply_markup=keyboard)
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    try:
        completion_result = await mark_user_completed(message.from_user.id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {completion_result}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è {message.from_user.id}: {e}")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await asyncio.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    try:
        saved_data = get_user_data(message.from_user.id)
        if saved_data and saved_data.get('tests'):
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        else:
            logger.warning(f"–í–ù–ò–ú–ê–ù–ò–ï: –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è {message.from_user.id}: {e}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    try:
        summary = await generate_final_results_summary(message.from_user.id)
        await safe_edit_message(message, summary)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –¥–ª—è {message.from_user.id}: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        fallback_text = f"""ü´Ä <b>–û–¢–õ–ò–ß–ù–û! –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!</b>

‚úÖ –í—Å–µ –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
üìä –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üéØ –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã –∫ –≤–µ–±–∏–Ω–∞—Ä—É!

<b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>"""
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for key, value in test_results.items():
            if value is not None:
                fallback_text += f"\n‚Ä¢ {key}: {value}"
            elif key.endswith('_skipped'):
                fallback_text += f"\n‚Ä¢ {key.replace('_skipped', '')}: –ø—Ä–æ–ø—É—â–µ–Ω"

        fallback_text += f"""

üóì <b>–í–µ–±–∏–Ω–∞—Ä:</b> 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö
üìç –°—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞

üìé –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –æ–±–µ—â–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã..."""
        
        await safe_edit_message(message, fallback_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ materials
    await send_completion_materials(message)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
async def send_completion_materials(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    import os
    from aiogram.types import FSInputFile
    
    materials_dir = "materials"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ materials
    if not os.path.exists(materials_dir):
        logger.warning("–ü–∞–ø–∫–∞ materials –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await message.answer("üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...")
        return
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ materials
    files_to_send = []
    
    try:
        all_files = os.listdir(materials_dir)
        
        # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
        for filename in all_files:
            file_path = os.path.join(materials_dir, filename)
            if os.path.isfile(file_path):
                files_to_send.append(file_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        if files_to_send:
            await message.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±–µ—â–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")
            
            for i, file_path in enumerate(files_to_send):
                try:
                    file_input = FSInputFile(file_path)
                    filename = os.path.basename(file_path)
                    
                    if "analyses" in filename.lower() or "–∞–Ω–∞–ª–∏–∑" in filename.lower():
                        caption = "üìã –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤–µ–±–∏–Ω–∞—Ä—É"
                    elif "checklist" in filename.lower() or "—á–µ–∫–ª–∏—Å—Ç" in filename.lower() or "–ø—Ä–µ–ø–∞—Ä–∞—Ç" in filename.lower():
                        caption = "üìå –ë–æ–Ω—É—Å: —á–µ–∫-–ª–∏—Å—Ç ¬´–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –∏ –º–µ—Ç–æ–¥–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ª–µ—á–∞—Ç —Å–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã¬ª"
                    elif "webinar" in filename.lower() or "–≤–µ–±–∏–Ω–∞—Ä" in filename.lower():
                        caption = "üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –≤–µ–±–∏–Ω–∞—Ä—É"
                    else:
                        caption = f"üìÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: {filename}"
                    
                    await message.answer_document(file_input, caption=caption)
                    await asyncio.sleep(1) 
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {os.path.basename(file_path)}")
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await send_text_materials(message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∞–ø–∫–æ–π materials: {e}")
        await send_text_materials(message)

async def send_text_materials(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
    
    analyses_text = """üìã <b>–°–ü–ò–°–û–ö –ë–ê–ó–û–í–´–• –ê–ù–ê–õ–ò–ó–û–í –î–õ–Ø –ö–ê–†–î–ò–û–ß–ï–ö–ê–ü–ê</b>

ü©∏ <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏:</b>
‚Ä¢ –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ —Å –ª–µ–π–∫–æ—Ñ–æ—Ä–º—É–ª–æ–π
‚Ä¢ –ë–∏–æ—Ö–∏–º–∏—è: –≥–ª—é–∫–æ–∑–∞, –æ–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω, –õ–ü–í–ü, –õ–ü–ù–ü, —Ç—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω, –º–æ—á–µ–≤–∏–Ω–∞, –ê–õ–¢, –ê–°–¢
‚Ä¢ –°-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–ª–æ–∫ (–°–†–ë)
‚Ä¢ –ì–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–º–æ–≥–ª–æ–±–∏–Ω (HbA1c)

üíâ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã:</b>
‚Ä¢ –ì–æ–º–æ—Ü–∏—Å—Ç–µ–∏–Ω
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω D (25-OH)
‚Ä¢ –¢–¢–ì, –¢4 —Å–≤–æ–±–æ–¥–Ω—ã–π
‚Ä¢ –§–µ—Ä—Ä–∏—Ç–∏–Ω

üìè <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –≠–ö–ì –≤ –ø–æ–∫–æ–µ
‚Ä¢ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ê–î –¥–æ–º–∞ (–¥–Ω–µ–≤–Ω–∏–∫ 7 –¥–Ω–µ–π)
‚Ä¢ –†–∞—Å—á–µ—Ç –ò–ú–¢ –∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Ç–∞–ª–∏–∏

üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑—ã —Å–¥–∞–≤–∞—Ç—å –Ω–∞—Ç–æ—â–∞–∫ (8-12 —á–∞—Å–æ–≤ –≥–æ–ª–æ–¥–∞)
‚Ä¢ –ó–∞ 24 —á–∞—Å–∞ –∏—Å–∫–ª—é—á–∏—Ç—å –∞–ª–∫–æ–≥–æ–ª—å –∏ —Ç—è–∂–µ–ª—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ –æ–±—ã—á–Ω–æ–π —Å—Ö–µ–º–µ
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞"""

    checklist_text = """üìå <b>–ß–ï–ö-–õ–ò–°–¢: –ü–†–ï–ü–ê–†–ê–¢–´, –ö–û–¢–û–†–´–ï –ù–ï –õ–ï–ß–ê–¢ –°–ï–†–î–¶–ï</b>

‚ùå <b>–ù–ï–≠–§–§–ï–ö–¢–ò–í–ù–´–ï "–°–ï–†–î–ï–ß–ù–´–ï" –ü–†–ï–ü–ê–†–ê–¢–´:</b>

üíä <b>–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã:</b>
‚Ä¢ –ú–∏–ª–¥—Ä–æ–Ω–∞—Ç, –ü—Ä–µ–¥—É–∫—Ç–∞–ª ‚Äî –Ω–µ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –†–∏–±–æ–∫—Å–∏–Ω ‚Äî —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø—Ä–µ–ø–∞—Ä–∞—Ç –±–µ–∑ –ø–æ–ª—å–∑—ã
‚Ä¢ –ö–æ–∫–∞—Ä–±–æ–∫—Å–∏–ª–∞–∑–∞ ‚Äî –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–µ—Ä–¥—Ü–µ

üß™ <b>"–°–æ—Å—É–¥–∏—Å—Ç—ã–µ" –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã:</b>
‚Ä¢ –ê–∫—Ç–æ–≤–µ–≥–∏–Ω, –°–æ–ª–∫–æ—Å–µ—Ä–∏–ª ‚Äî –Ω–µ –∏–º–µ—é—Ç –¥–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
‚Ä¢ –¶–µ—Ä–µ–±—Ä–æ–ª–∏–∑–∏–Ω ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≤—Ä–æ–ª–æ–≥–∏–∏
‚Ä¢ –í–∏–Ω–ø–æ—Ü–µ—Ç–∏–Ω ‚Äî –Ω–µ —É–ª—É—á—à–∞–µ—Ç –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ

üíâ <b>"–í–∏—Ç–∞–º–∏–Ω—ã –¥–ª—è —Å–µ—Ä–¥—Ü–∞":</b>
‚Ä¢ –ü–∞–Ω–∞–Ω–≥–∏–Ω, –ê—Å–ø–∞—Ä–∫–∞–º ‚Äî –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∫–∞–ª–∏–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B –≤ –∏–Ω—ä–µ–∫—Ü–∏—è—Ö ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ
‚Ä¢ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã ‚Äî –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–¥–Ω—ã

‚ö†Ô∏è <b>–ü–û–ú–ù–ò–¢–ï:</b>
‚Ä¢ –ù–µ —Ç—Ä–∞—Ç—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
‚Ä¢ –î–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã: —Å—Ç–∞—Ç–∏–Ω—ã, –∏–Ω–≥–∏–±–∏—Ç–æ—Ä—ã –ê–ü–§, –±–µ—Ç–∞-–±–ª–æ–∫–∞—Ç–æ—Ä—ã
‚Ä¢ –õ—é–±—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
‚Ä¢ –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –≤–∞–∂–Ω–µ–µ –ª—é–±—ã—Ö —Ç–∞–±–ª–µ—Ç–æ–∫

‚úÖ <b>–ß–¢–û –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –†–ê–ë–û–¢–ê–ï–¢:</b>
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
‚Ä¢ –û—Ç–∫–∞–∑ –æ—Ç –∫—É—Ä–µ–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–∞–≤–ª–µ–Ω–∏—è –∏ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —á–∞—Å—Ç—è–º–∏
    await message.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ:")
    await asyncio.sleep(1)
    
    await message.answer(analyses_text, parse_mode="HTML")
    await asyncio.sleep(2)
    
    await message.answer(checklist_text, parse_mode="HTML")
    await asyncio.sleep(1)
    
    await message.answer("üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!", parse_mode="HTML")

# ============================================================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–¢–û–ì–û–í–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (—Å –∑–∞—â–∏—Ç–æ–π)
# ============================================================================

async def generate_final_results_summary(telegram_id: int) -> str:
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    
    try:
        logger.info(f"=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–¢–û–ì–û–í–û–ô –°–í–û–î–ö–ò –î–õ–Ø {telegram_id} ===")
        
        from database import get_user_data
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        data = get_user_data(telegram_id)
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã: {data is not None}")
        if data:
            logger.info(f"User –¥–∞–Ω–Ω—ã–µ: {data.get('user') is not None}")
            logger.info(f"Survey –¥–∞–Ω–Ω—ã–µ: {data.get('survey') is not None}")
            logger.info(f"Tests –¥–∞–Ω–Ω—ã–µ: {data.get('tests') is not None}")
        
        if not data:
            logger.error(f"‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –¥–ª—è {telegram_id}")
            return """ü´Ä <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>




üóì <b>–í–µ–±–∏–Ω–∞—Ä:</b> 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö

üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        
        user = data.get('user')
        survey = data.get('survey')
        tests = data.get('tests')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not user:
            logger.error(f"‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –≤ –ë–î –¥–ª—è {telegram_id}")
            return """ü´Ä <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>


üîÑ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /restart
‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

üóì <b>–í–µ–±–∏–Ω–∞—Ä:</b> 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö"""
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        name = getattr(user, 'name', None) or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞
        age = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        gender = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        if survey:
            age = getattr(survey, 'age', None) or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            gender = getattr(survey, 'gender', None) or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            logger.info(f"Survey –¥–∞–Ω–Ω—ã–µ: –≤–æ–∑—Ä–∞—Å—Ç={age}, –ø–æ–ª={gender}")
        else:
            logger.warning(f"‚ö†Ô∏è –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –î–ê–ù–ù–´–ï –û–ü–†–û–°–ê –¥–ª—è {telegram_id}")
        
        # –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤
        if not tests:
            logger.error(f"‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –î–ê–ù–ù–´–ï –¢–ï–°–¢–û–í –¥–ª—è {telegram_id}")
            return f"""ü´Ä <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>

üë§ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!</b>

‚ùå <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

‚úÖ <b>–ù–æ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>
üìä –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ
üéØ –í—ã –≥–æ—Ç–æ–≤—ã –∫ —É—á–∞—Å—Ç–∏—é

üóì <b>–í–µ–±–∏–Ω–∞—Ä:</b> 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö
üìç –°—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞

üí° –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–π—á–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /status"""
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        risk_level = getattr(tests, 'overall_cv_risk_level', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        risk_score = getattr(tests, 'overall_cv_risk_score', None) or 0
        risk_factors_count = getattr(tests, 'risk_factors_count', None) or 0
        
        logger.info(f"Tests –¥–∞–Ω–Ω—ã–µ: —Ä–∏—Å–∫={risk_level}, –±–∞–ª–ª—ã={risk_score}, —Ñ–∞–∫—Ç–æ—Ä—ã={risk_factors_count}")
        
        hads_anxiety_score = getattr(tests, 'hads_anxiety_score', None) or 0
        hads_depression_score = getattr(tests, 'hads_depression_score', None) or 0
        hads_anxiety_level = getattr(tests, 'hads_anxiety_level', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        hads_depression_level = getattr(tests, 'hads_depression_level', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        burns_score = getattr(tests, 'burns_score', None) or 0
        burns_level = getattr(tests, 'burns_level', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        isi_score = getattr(tests, 'isi_score', None) or 0
        isi_level = getattr(tests, 'isi_level', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        stop_bang_score = getattr(tests, 'stop_bang_score', None) or 0
        stop_bang_risk = getattr(tests, 'stop_bang_risk', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        ess_score = getattr(tests, 'ess_score', None) or 0
        ess_level = getattr(tests, 'ess_level', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        fagerstrom_score = getattr(tests, 'fagerstrom_score', None)
        fagerstrom_level = getattr(tests, 'fagerstrom_level', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        fagerstrom_skipped = getattr(tests, 'fagerstrom_skipped', False)
        
        audit_score = getattr(tests, 'audit_score', None)
        audit_level = getattr(tests, 'audit_level', None) or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        audit_skipped = getattr(tests, 'audit_skipped', False)
        
        logger.info(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–ª—è {telegram_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
        summary = f"""ü´Ä <b>–ò–¢–û–ì–ò –í–ê–®–ï–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò</b>

üë§ <b>{name}</b>
üìä –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç | –ü–æ–ª: {gender}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ <b>–û–ë–©–ò–ô –°–ï–†–î–ï–ß–ù–û-–°–û–°–£–î–ò–°–¢–´–ô –†–ò–°–ö</b>
{get_risk_emoji(risk_level)} <b>{risk_level}</b>
üìà –û–±—â–∏–π –±–∞–ª–ª: {risk_score}
‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞: {risk_factors_count}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í</b>

üîπ <b>–¢—Ä–µ–≤–æ–≥–∞ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏—è (HADS):</b>
   ‚Ä¢ –¢—Ä–µ–≤–æ–≥–∞: {hads_anxiety_score} –±–∞–ª–ª–æ–≤ ({hads_anxiety_level})
   ‚Ä¢ –î–µ–ø—Ä–µ—Å—Å–∏—è: {hads_depression_score} –±–∞–ª–ª–æ–≤ ({hads_depression_level})

üîπ <b>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ë–µ—Ä–Ω—Å):</b>
   ‚Ä¢ {burns_score} –±–∞–ª–ª–æ–≤ ({burns_level})

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üò¥ <b>–ö–ê–ß–ï–°–¢–í–û –°–ù–ê –ò –û–¢–î–´–•–ê</b>

üîπ <b>–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (ISI):</b>
   ‚Ä¢ {isi_score} –±–∞–ª–ª–æ–≤ ({isi_level})

üîπ <b>–†–∏—Å–∫ –∞–ø–Ω–æ—ç —Å–Ω–∞ (STOP-BANG):</b>
   ‚Ä¢ {stop_bang_score} –±–∞–ª–ª–æ–≤ ({stop_bang_risk} —Ä–∏—Å–∫)

üîπ <b>–î–Ω–µ–≤–Ω–∞—è —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å (ESS):</b>
   ‚Ä¢ {ess_score} –±–∞–ª–ª–æ–≤ ({ess_level})

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üö≠ <b>–û–ë–†–ê–ó –ñ–ò–ó–ù–ò</b>"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä–µ–Ω–∏–∏
        if fagerstrom_skipped:
            summary += "\nüîπ <b>–ö—É—Ä–µ–Ω–∏–µ:</b> –ù–µ –∫—É—Ä–∏—Ç ‚úÖ"
        elif fagerstrom_score is not None:
            summary += f"\nüîπ <b>–ù–∏–∫–æ—Ç–∏–Ω–æ–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:</b> {fagerstrom_score} –±–∞–ª–ª–æ–≤ ({fagerstrom_level})"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–∫–æ–≥–æ–ª–µ
        if audit_skipped:
            summary += "\nüîπ <b>–ê–ª–∫–æ–≥–æ–ª—å:</b> –ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç ‚úÖ"
        elif audit_score is not None:
            summary += f"\nüîπ <b>–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è:</b> {audit_score} –±–∞–ª–ª–æ–≤ ({audit_level})"
        
        summary += f"""

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° <b>–ß–¢–û –≠–¢–û –û–ó–ù–ê–ß–ê–ï–¢</b>

{get_risk_explanation(risk_level)}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ <b>–í–´ –ì–û–¢–û–í–´ –ö –í–ï–ë–ò–ù–ê–†–£!</b>

–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

üóì <b>–í–µ–±–∏–Ω–∞—Ä:</b> 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö
üìç –°—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞

üìä <b>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:</b> ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}"""
        
        logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è {telegram_id}")
        return summary
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è {telegram_id}: {e}")
        return f"""ü´Ä <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>

‚úÖ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
üìä –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
üéØ –í—ã –≥–æ—Ç–æ–≤—ã –∫ –≤–µ–±–∏–Ω–∞—Ä—É!

üóì <b>–í–µ–±–∏–Ω–∞—Ä:</b> 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö
üìç –°—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞

üí° –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ

<b>ID —Å–µ—Å—Å–∏–∏:</b> {telegram_id} (–¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏)"""

def get_risk_emoji(risk_level: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    risk_emojis = {
        "–ù–ò–ó–ö–ò–ô": "üü¢",
        "–£–ú–ï–†–ï–ù–ù–´–ô": "üü°", 
        "–í–´–°–û–ö–ò–ô": "üü†",
        "–û–ß–ï–ù–¨ –í–´–°–û–ö–ò–ô": "üî¥"
    }
    return risk_emojis.get(risk_level, "‚ö™")

def get_risk_explanation(risk_level: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    explanations = {
        "–ù–ò–ó–ö–ò–ô": """üü¢ <b>–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫</b> –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞—à–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–∞. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º.""",
        
        "–£–ú–ï–†–ï–ù–ù–´–ô": """üü° <b>–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫</b> –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞. –≠—Ç–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ.""",
        
        "–í–´–°–û–ö–ò–ô": """üü† <b>–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</b> —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–∏–º—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–≤—ã—à–∞—é—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π. –í–∞–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤.""",
        
        "–û–ß–ï–ù–¨ –í–´–°–û–ö–ò–ô": """üî¥ <b>–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</b> –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Å–µ—Ä—å–µ–∑–Ω–æ –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ."""
    }
    return explanations.get(risk_level, "‚ö™ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.")

@router.callback_query(F.data == "continue_tests")
async def continue_to_test_menu(callback: CallbackQuery, state: FSMContext):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤"""
    await safe_answer_callback(callback)
    await log_user_interaction(callback.from_user.id, "continue_to_test_menu")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    data = await state.get_data()
    
    text = """üìù <b>–í–´–ë–û–† –¢–ï–°–¢–û–í</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    keyboard = get_test_selection_keyboard(data)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_edit_message(callback.message, text, reply_markup=keyboard)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ: {e}")
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    await state.set_state(UserStates.test_selection)
# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô (–° –ó–ê–©–ò–¢–û–ô)
# ============================================================================
@router.callback_query(F.data == "test_check_completion")
async def check_test_completion(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await safe_answer_callback(callback)
    
    data = await state.get_data()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    completed_tests = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
    test_checks = [
        ("hads_anxiety_score", "HADS (—Ç—Ä–µ–≤–æ–≥–∞ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏—è)"),
        ("burns_score", "–¢–µ—Å—Ç –ë–µ—Ä–Ω—Å–∞"),
        ("isi_score", "ISI (–∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞)"),
        ("stop_bang_score", "STOP-BANG (–∞–ø–Ω–æ—ç —Å–Ω–∞)"),
        ("ess_score", "ESS (–¥–Ω–µ–≤–Ω–∞—è —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å)"),
        ("fagerstrom_score", "–§–∞–≥–µ—Ä—Å—Ç—Ä–µ–º (–∫—É—Ä–µ–Ω–∏–µ)"),
        ("audit_score", "AUDIT (–∞–ª–∫–æ–≥–æ–ª—å)")
    ]
    
    missing_tests = []
    
    for test_key, test_name in test_checks:
        if test_key in data or f"{test_key.split('_')[0]}_skipped" in data:
            completed_tests.append(test_name)
        else:
            missing_tests.append(test_name)
    
    if len(missing_tests) == 0:
        # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        text = f"""‚úÖ <b>–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!</b>

–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(completed_tests)}/7

–ì–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É?"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="test_complete")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="back_to_tests")]
        ])
        
    elif len(missing_tests) <= 2:
        # –ü–æ—á—Ç–∏ –≤—Å–µ –ø—Ä–æ–π–¥–µ–Ω—ã
        text = f"""üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>

‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed_tests)}/7 —Ç–µ—Å—Ç–æ–≤
‚ùå –û—Å—Ç–∞–ª–æ—Å—å: {len(missing_tests)} —Ç–µ—Å—Ç–æ–≤

<b>–ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã:</b>
‚Ä¢ {chr(10).join(missing_tests)}

–ú–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="test_complete")],
            [InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è", callback_data="back_to_tests")]
        ])
        
    else:
        # –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ
        text = f"""‚ö†Ô∏è <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed_tests)}/7 —Ç–µ—Å—Ç–æ–≤
‚ùå –û—Å—Ç–∞–ª–æ—Å—å: {len(missing_tests)} —Ç–µ—Å—Ç–æ–≤

<b>–ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã:</b>
‚Ä¢ {chr(10).join(missing_tests)}

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="back_to_tests")]
        ])
    
    await safe_edit_message(callback.message, text, reply_markup=keyboard)

@router.callback_query(F.data == "back_to_tests")
async def back_to_test_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤"""
    await safe_answer_callback(callback)
    
    data = await state.get_data()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
    keyboard = get_test_selection_keyboard(data)
    
    await safe_edit_message(callback.message, text, reply_markup=keyboard)
    await state.set_state(UserStates.test_selection)
    
@router.message()
async def handle_unknown_message(message: Message, state: FSMContext):
    """–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥"""
    
    # –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.strip().lower().startswith('/admin'):
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /admin –∑–¥–µ—Å—å - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç admin router
        return
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    admin_commands = ['/stats', '/export', '/broadcast']
    if message.text:
        text = message.text.strip().lower()
        for cmd in admin_commands:
            if text.startswith(cmd):
                return
    
    await log_user_interaction(message.from_user.id, "unknown_message", message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_state = await state.get_state()
    user_completed = check_user_completed(message.from_user.id)
    
    if current_state and ("survey" in current_state or "test" in current_state):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
        text = """üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤</b>

–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.

üîÑ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:
/restart - –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"""
        
    elif user_completed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        text = """‚úÖ <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –≥–æ—Ç–æ–≤—ã –∫ –≤–µ–±–∏–Ω–∞—Ä—É.

üìã <b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å

üóì <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –í–µ–±–∏–Ω–∞—Ä 3 –∞–≤–≥—É—Å—Ç–∞ –≤ 12:00 –ú–°–ö"""
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª
        text = f"""üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É, –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "{message.text}"

ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤–µ–±–∏–Ω–∞—Ä—É <b>"–£–º–Ω—ã–π –∫–∞—Ä–¥–∏–æ—á–µ–∫–∞–ø"</b>.

üöÄ <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:</b>
/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É

üìã <b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

üí° –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 15-20 –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞!"""
    
    await message.answer(text, parse_mode="HTML")

# ============================================================================
# –≠–ö–°–ü–û–†–¢ MIDDLEWARE –ò –†–û–£–¢–ï–†–ê
# ============================================================================

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
__all__ = ['state_protection', 'router']